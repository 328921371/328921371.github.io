<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陈先生的小前端</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.chensheng.group/"/>
  <updated>2021-10-16T05:23:06.737Z</updated>
  <id>https://www.chensheng.group/</id>
  
  <author>
    <name>陈晟</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信开发学习</title>
    <link href="https://www.chensheng.group/2021/10/07/148-%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    <id>https://www.chensheng.group/2021/10/07/148-%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/</id>
    <published>2021-10-07T05:28:00.000Z</published>
    <updated>2021-10-16T05:23:06.737Z</updated>
    
    <content type="html"><![CDATA[<hr style='filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)' color='#FF0000' size='1' /><blockquote><p>简单的介绍一下微信开发的一些注意事项</p></blockquote><a id="more"></a><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html#1" target="_blank" rel="noopener">官网地址</a></p><h3 id="什么是OpenID-UnionID"><a href="#什么是OpenID-UnionID" class="headerlink" title="什么是OpenID,UnionID"></a>什么是OpenID,UnionID</h3><p>做微信开发,绕不过两个名词 OpenID,UnionID</p><ul><li>OpenID</li></ul><p>获取OpenID是我们在做微信开发必须要做的一件事情,OpenID就理解成用户的唯一标识</p><ul><li>UnionID</li></ul><p>如果需要在多公众号、移动应用之间做用户共通，则需前往微信开放平台，将这些公众号和应用绑定到一个开放平台账号下<br>绑定后，一个用户虽然对多个公众号和应用有多个不同的OpenID，但他对所有这些同一开放平台账号下的公众号和应用，<br>只有一个UnionID，可以在用户管理-获取用户基本信息（UnionID机制）</p><h3 id="什么是Access-token"><a href="#什么是Access-token" class="headerlink" title="什么是Access token"></a>什么是Access token</h3><p>access_token是公众号的全局唯一接口调用凭据，公众号调用各接口时都需使用access_token。</p><p>公众号和小程序均可以使用AppID和AppSecret调用本接口来获取access_token。AppID和AppSecret可在“微信公众平台-开发-基本配置”页中获得。</p><p>调用接口时，请登录“微信公众平台-开发-基本配置”提前将服务器IP地址添加到IP白名单中，点击查看设置方法，否则将无法调用成功。</p><h3 id="网页授权-公众号"><a href="#网页授权-公众号" class="headerlink" title="网页授权(公众号)"></a>网页授权(公众号)</h3><p>接下来看看如何授权</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let link &#x3D; window.location.href;</span><br><span class="line">let appid &#x3D; &#39;appid&#39;;</span><br><span class="line">let uri &#x3D; encodeURIComponent(link);</span><br><span class="line">let authURL &#x3D; &#96;https:&#x2F;&#x2F;open.weixin.qq.com&#x2F;connect&#x2F;oauth2&#x2F;authorize?appid&#x3D;$&#123;appid&#125;&amp;redirect_uri&#x3D;$&#123;uri&#125;&amp;response_type&#x3D;code&amp;scope&#x3D;snsapi_userinfo&amp;state&#x3D;123#wechat_redirect&#96;;</span><br><span class="line">window.location.href &#x3D; authURL;</span><br></pre></td></tr></table></figure><p>通过代码可以看出,公众号使用跳转的方式进行网页授权,获取到用户的code,后端通过code,获取用户的openid</p><blockquote><p>关于网页授权的两种scope的区别说明</p></blockquote><ol><li><p>以snsapi_base为scope发起的网页授权，是用来获取进入页面的用户的openid的，并且是静默授权并自动跳转到回调页的。用户感知的就是直接进入了回调页（往往是业务页面）</p></li><li><p>以snsapi_userinfo为scope发起的网页授权，是用来获取用户的基本信息的。但这种授权需要用户手动同意，并且由于用户同意过，所以无须关注，就可在授权后获取该用户的基本信息。</p></li><li><p>用户管理类接口中的“获取用户基本信息接口”，是在用户和公众号产生消息交互或关注后事件推送后，才能根据用户OpenID来获取用户基本信息。这个接口，包括其他微信接口，都是需要该用户（即openid）关注了公众号后，才能调用成功的。</p></li></ol><blockquote><p>关于特殊场景下的静默授权</p></blockquote><p>为什么我们的项目,使用的是snsapi_userinfo,也没有弹出授权?</p><ol><li><p>上面已经提到，对于以snsapi_base为scope的网页授权，就静默授权的，用户无感知；</p></li><li><p>对于已关注公众号的用户，如果用户从公众号的会话或者自定义菜单进入本公众号的网页授权页，即使是scope为snsapi_userinfo，也是静默授权，用户无感知。</p></li></ol><p>对于公众号授权步骤,分为四步</p><ol><li><p>引导用户进入授权页面同意授权，获取code</p></li><li><p>通过code换取网页授权access_token（与基础支持中的access_token不同）</p></li><li><p>如果需要，开发者可以刷新网页授权access_token，避免过期</p></li><li><p>通过网页授权access_token和openid获取用户基本信息（支持UnionID机制）</p></li></ol><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p>这里强调一下开发中可能会遇到的问题</p><ul><li>回调的链接问题</li></ul><ol><li><p>若提示“该链接无法访问”，请检查参数是否填写错误，是否拥有scope参数对应的授权作用域权限。</p></li><li><p>由于授权操作安全等级较高，所以在发起授权请求时，微信会对授权链接做正则强匹配校验，如果链接的参数顺序不对，授权页面将无法正常访问</p></li><li><p>跳转回调redirect_uri，应当使用https链接来确保授权code的安全性。</p></li><li><p>回调的链接不支持 hash模式,需要做特殊处理</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let href &#x3D; &#39;&#39;;</span><br><span class="line">const w &#x3D; location.href.indexOf(&#39;?&#39;);</span><br><span class="line">const j &#x3D; location.href.indexOf(&#39;#&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 处理微信回调url, 重新获取code</span><br><span class="line">if (w !&#x3D;&#x3D; -1 &amp;&amp; j &gt; w) &#123;</span><br><span class="line">  href &#x3D; location.href.substr(0, w) + location.href.substr(j, location.href.length) + location.search.replace(&#x2F;\?&#x2F;, &quot;&amp;&quot;);</span><br><span class="line">  location.href &#x3D; href;</span><br><span class="line">  return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取access_token问题</li></ul><ol><li><p>通过code获取access_token,微信公众号配置IP白名单,才可以进行请求</p></li><li><p>由于公众号的secret和获取到的access_token安全级别都非常高，必须只保存在服务器，不允许传给客户端。后续刷新access_token、通过access_token获取用户信息等步骤，也必须从服务器发起。</p></li></ol><h4 id="拉取用户信息-需scope为-snsapi-userinfo"><a href="#拉取用户信息-需scope为-snsapi-userinfo" class="headerlink" title="拉取用户信息(需scope为 snsapi_userinfo)"></a>拉取用户信息(需scope为 snsapi_userinfo)</h4><p>如果网页授权作用域为snsapi_userinfo，则此时开发者可以通过access_token和openid拉取用户信息了。</p><p>到这里,公众号完成了基本的网页授权</p><h3 id="公众号使用微信JS-SDK"><a href="#公众号使用微信JS-SDK" class="headerlink" title="公众号使用微信JS-SDK"></a>公众号使用微信JS-SDK</h3><p>JSSDK使用步骤</p><h4 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h4><p>先登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS接口安全域名”。</p><p>备注：登录后可在“开发者中心”查看对应的接口权限。</p><h4 id="引入JS文件"><a href="#引入JS文件" class="headerlink" title="引入JS文件"></a>引入JS文件</h4><ol><li><p>在需要调用JS接口的页面引入如下JS文件，（支持https）：<a href="http://res.wx.qq.com/open/js/jweixin-1.6.0.js" target="_blank" rel="noopener">http://res.wx.qq.com/open/js/jweixin-1.6.0.js</a></p></li><li><p>也可以直接导入npm包<br>首先安装 weixin-js-sdk, 之后引入进来 import wx from ‘weixin-js-sdk’</p></li><li><p>也可以使用微信浏览器自带的方法(WeixinJSBridge)</p></li></ol><h4 id="通过config接口注入权限验证配置"><a href="#通过config接口注入权限验证配置" class="headerlink" title="通过config接口注入权限验证配置"></a>通过config接口注入权限验证配置</h4><p>所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">  debug: true, &#x2F;&#x2F; 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span><br><span class="line">  appId: &#39;&#39;, &#x2F;&#x2F; 必填，公众号的唯一标识</span><br><span class="line">  timestamp: , &#x2F;&#x2F; 必填，生成签名的时间戳</span><br><span class="line">  nonceStr: &#39;&#39;, &#x2F;&#x2F; 必填，生成签名的随机串</span><br><span class="line">  signature: &#39;&#39;,&#x2F;&#x2F; 必填，签名</span><br><span class="line">  jsApiList: [] &#x2F;&#x2F; 必填，需要使用的JS接口列表</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="通过ready接口处理成功验证"><a href="#通过ready接口处理成功验证" class="headerlink" title="通过ready接口处理成功验证"></a>通过ready接口处理成功验证</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.ready(function()&#123;</span><br><span class="line">  &#x2F;&#x2F; config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="通过error接口处理失败验证"><a href="#通过error接口处理失败验证" class="headerlink" title="通过error接口处理失败验证"></a>通过error接口处理失败验证</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wx.error(function(res)&#123;</span><br><span class="line">  &#x2F;&#x2F; config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>到这里,微信公众号的JS-SDK就可以正常使用了,分享功能,音频接口,指纹识别,微信支付等可以在其他的博客看到使用的详细方法,更多的可以看看官方文档</p><h3 id="小程序授权-微信小程序"><a href="#小程序授权-微信小程序" class="headerlink" title="小程序授权(微信小程序)"></a>小程序授权(微信小程序)</h3><p>在说到小程序之前,先说一下它和公众号的区别</p><p>网页开发者可以使用到各种浏览器暴露出来的 DOM API，进行 DOM 选中和操作.</p><p>而小程序的逻辑层和渲染层是分开的，逻辑层运行在 JSCore 中，并没有一个完整浏览器对象，因而缺少相关的DOM API和BOM API。</p><h4 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h4><p>各平台脚本执行环境以及用于渲染非原生组件的环境是各不相同的：</p><p>在 iOS、iPadOS 和 Mac OS 上，小程序逻辑层的 javascript 代码运行在 JavaScriptCore 中，视图层是由 WKWebView 来渲染的，环境有 iOS 14、iPad OS 14、Mac OS 11.4 等；<br>在 Android 上，小程序逻辑层的 javascript 代码运行在 V8 中，视图层是由基于 Mobile Chrome 内核的自研 XWeb 引擎来渲染的；<br>在 Windows 上，小程序逻辑层 javascript 和视图层 javascript 都是用 Chrome 内核；<br>在 开发工具上，小程序逻辑层的 javascript 代码是运行在 NW.js 中，视图层是由 Chromium Webview 来渲染的。</p><table><thead><tr><th>运行环境</th><th>逻辑层</th><th>渲染层</th></tr></thead><tbody><tr><td>iOS</td><td>JavaScriptCore</td><td>WKWebView</td></tr><tr><td>安卓</td><td>V8</td><td>chromium定制内核</td></tr><tr><td>小程序开发者工具</td><td>NWJS</td><td>Chrome WebView</td></tr></tbody></table><p>由于视图渲染的方式不一致,还是建议开发者需要在 iOS 和 Android 上分别检查小程序的真实表现</p><p>除了样式的差异,在js上也有一定的区别</p><h5 id="Promise-时序差异"><a href="#Promise-时序差异" class="headerlink" title="Promise 时序差异"></a>Promise 时序差异</h5><p>由于实现原因与 iOS JavaScriptCore 限制，iOS 环境下的 Promise 是一个使用 setTimeout 模拟的 Polyfill。这意味着 Promise 触发的任务为普通任务，而非微任务，进而导致 在 iOS 下的 Promise 时序会和标准存在差异。</p><blockquote><p>具体的宏任务和微任务的差别,这里不细讲了,博客的其他文章中有</p></blockquote><h4 id="登录流程"><a href="#登录流程" class="headerlink" title="登录流程"></a>登录流程</h4><p>回归正传,看看小程序的授权流程,上图</p><p><img src="https://res.wx.qq.com/wxdoc/dist/assets/img/api-login.2fcc9f35.jpg" alt="登录流程时序"></p><p>微信小程序的登录比较简单,简单来说只有几步</p><ol><li>调用 wx.login() 获取 临时登录凭证code ，并回传到开发者服务器。</li><li>调用 auth.code2Session 接口，换取 用户唯一标识 OpenID 、用户在微信开放平台帐号下的唯一标识UnionID 和 会话密钥 session_key。</li></ol><h4 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h4><p>部分接口需要经过用户授权同意才能调用。我们把这些接口按使用范围分成多个scope，用户选择对scope来进行授权，当授权给一个 scope 之后，其对应的所有接口都可以直接使用。</p><table><thead><tr><th>scope</th><th>对应接口</th><th>描述</th></tr></thead><tbody><tr><td>scope.userInfo</td><td>wx.getUserInfo</td><td>用户信息</td></tr><tr><td>scope.userLocation</td><td>wx.getLocation, wx.chooseLocation</td><td>地理位置</td></tr><tr><td>scope.userLocationBackground</td><td>wx.startLocationUpdateBackground</td><td>后台定位</td></tr><tr><td>scope.werun</td><td>wx.getWeRunData</td><td>微信运动步数</td></tr><tr><td>scope.record</td><td>wx.startRecord</td><td>录音功能</td></tr><tr><td>scope.writePhotosAlbum</td><td>wx.saveImageToPhotosAlbum, wx.saveVideoToPhotosAlbum</td><td>保存到相册</td></tr><tr><td>scope.camera</td><td>camera 组件</td><td>保存到相册</td></tr></tbody></table><p>此类接口调用时：</p><ul><li>如果用户未接受，会弹窗询问用户，用户点击同意后方可调用接口；</li><li>如果用户已授权，可以直接调用接口；</li><li>如果用户已拒绝授权，则不会出现弹窗，而是直接进入接口 fail 回调。请开发者兼容用户拒绝授权的场景。</li></ul><p>开发者可以使用 wx.getSetting 获取用户当前的授权状态。然后判断用户是否拒绝授权,弹窗二次提醒用户是否授权,开发者可以调用 wx.openSetting 打开设置界面，引导用户开启授权。</p><p><a href="https://developers.weixin.qq.com/community/develop/doc/000cea2305cc5047af5733de751008" target="_blank" rel="noopener">openSetting接口调整</a><br><a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserProfile.html#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81" target="_blank" rel="noopener">getUserInfo接口调整</a><br><a href="https://developers.weixin.qq.com/community/develop/doc/000aee91a98d206bc6dbe722b51801" target="_blank" rel="noopener">getLocation接口调整</a></p><blockquote><p>需要注意的是, getUserProfile获取用户昵称头像等,需要用户手动触发,每次调用都会弹窗</p></blockquote><h4 id="获取手机号"><a href="#获取手机号" class="headerlink" title="获取手机号"></a>获取手机号</h4><p>因为需要用户主动触发才能发起获取手机号接口，所以该功能不由 API 来调用，需用 button 组件的点击来触发。</p><p>需要将 button 组件 open-type 的值设置为 getPhoneNumber，当用户点击并同意之后，可以通过 bindgetphonenumber 事件回调获取到微信服务器返回的加密数据， 然后在第三方服务端结合 session_key 以及 app_id 进行解密获取手机号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;button open-type&#x3D;&quot;getPhoneNumber&quot; bindgetphonenumber&#x3D;&quot;getPhoneNumber&quot;&gt;&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">getPhoneNumber (e) &#123;</span><br><span class="line">  console.log(e.detail.errMsg)</span><br><span class="line">  console.log(e.detail.iv)</span><br><span class="line">  console.log(e.detail.encryptedData)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取到的加密数据给到后端,获取手机号</span><br></pre></td></tr></table></figure><blockquote><p>在回调中调用 wx.login 登录，可能会刷新登录态。此时服务器使用 code 换取的 sessionKey 不是加密时使用的 sessionKey，导致解密失败。建议开发者提前进行 login；或者在回调中先使用 checkSession 进行登录态检查，避免 login 刷新登录态。</p></blockquote><h3 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h3><p>上传图片,下载,地图等功能,需要服务器配置安全域名</p><blockquote><p>地图有的时候需要用到<code>https://apis.map.qq.com</code>,也要配置域名</p></blockquote><p>如果项目中有用到web-view组件,H5的链接需要配置业务域名,配置时校验文件需要放在域名的根目录</p><h4 id="服务器域名配置"><a href="#服务器域名配置" class="headerlink" title="服务器域名配置"></a>服务器域名配置</h4><p>服务器域名请在 「小程序后台-开发-开发设置-服务器域名」 中进行配置，配置时需要注意：</p><ul><li>域名只支持 https (wx.request、wx.uploadFile、wx.downloadFile) 和 wss (wx.connectSocket) 协议；</li><li>域名不能使用 IP 地址（小程序的局域网 IP 除外）或 localhost；</li><li>域名必须经过 ICP 备案；</li><li>出于安全考虑，api.weixin.qq.com 不能被配置为服务器域名，相关API也不能在小程序内调用。 开发者应将 AppSecret 保存到后台服务器中，通过服务器使用 getAccessToken 接口获取 access_token，并调用相关 API；</li><li>不支持配置父域名，使用子域名。</li></ul><h4 id="HTTPS-证书"><a href="#HTTPS-证书" class="headerlink" title="HTTPS 证书"></a>HTTPS 证书</h4><p>小程序必须使用 HTTPS/WSS 发起网络请求。请求时系统会对服务器域名使用的 HTTPS 证书进行校验，如果校验失败，则请求不能成功发起。由于系统限制，不同平台对于证书要求的严格程度不同。为了保证小程序的兼容性，建议开发者按照最高标准进行证书配置，并使用相关工具检查现有证书是否符合要求。</p><p>对证书要求如下：</p><ul><li>HTTPS 证书必须有效；<ul><li>证书必须被系统信任，即根证书被已系统内置</li><li>部署 SSL 证书的网站域名必须与证书颁发的域名一致</li><li>证书必须在有效期内</li><li>证书的信任链必需完整（需要服务器配置）</li></ul></li><li>iOS 不支持自签名证书;</li><li>iOS 下证书必须满足苹果 App Transport Security (ATS) 的要求;</li><li>TLS 必须支持 1.2 及以上版本。部分旧 Android 机型还未支持 TLS 1.2，请确保 HTTPS 服务器的 TLS 版本支持 1.2 及以下版本;</li><li>部分 CA 可能不被操作系统信任，请开发者在选择证书时注意小程序和各系统的相关通告。<ul><li>Chrome 56/57 内核对 WoSign、StartCom 证书限制周知</li></ul></li></ul><p>(…未完待续)</p>]]></content>
    
    <summary type="html">
    
      &lt;hr style=&#39;filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)&#39; color=&#39;#FF0000&#39; size=&#39;1&#39; /&gt;

&lt;blockquote&gt;
&lt;p&gt;简单的介绍一下微信开发的一些注意事项&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="javaScript" scheme="https://www.chensheng.group/categories/javaScript/"/>
    
    
      <category term="javaScript" scheme="https://www.chensheng.group/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>防抖与节流</title>
    <link href="https://www.chensheng.group/2021/09/03/147-%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/"/>
    <id>https://www.chensheng.group/2021/09/03/147-%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/</id>
    <published>2021-09-03T06:53:00.000Z</published>
    <updated>2021-09-03T06:56:04.124Z</updated>
    
    <content type="html"><![CDATA[<hr style='filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)' color='#FF0000' size='1' /><blockquote><p>节流与防抖就像重绘和回流一样重要,都是为了提高性能,一直以为博客里面已经写了,结果发现没有,现在补一下</p></blockquote><a id="more"></a><h3 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖(debounce)"></a>防抖(debounce)</h3><p>函数防抖：在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。</p><p>分解一下需求：</p><ul><li>持续触发不执行</li><li>不触发的一段时间之后再执行</li></ul><p>我们什么场景下会用到呢</p><p>举个例子,我们想要让搜索的输入框输入后,开始查询,调用后端的接口,但是直接监听input的change事件,每按一下键盘,就去调用接口了,但是这个时候,用户其实并没有输入完他的关键字,这个时候,就需要用到函数防抖了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 函数防抖的实现</span><br><span class="line">function debounce(fn, wait) &#123;</span><br><span class="line">  var timer &#x3D; null;</span><br><span class="line">  return function() &#123;</span><br><span class="line">    var context &#x3D; this,</span><br><span class="line">    args &#x3D; arguments;</span><br><span class="line">    &#x2F;&#x2F; 如果此时存在定时器的话，则取消之前的定时器重新记时</span><br><span class="line">    if (timer) &#123;</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">      timer &#x3D; null;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 设置定时器，使事件间隔指定事件后执行</span><br><span class="line">    timer &#x3D; setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">      fn.apply(context, args);</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="节流-throttle"><a href="#节流-throttle" class="headerlink" title="节流(throttle)"></a>节流(throttle)</h3><p>函数节流：规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。</p><p>分解一下需求：</p><ul><li>持续触发并不会执行多次</li><li>到一定时间再去执行</li></ul><p>假设,刚刚的那个需求变了,产品发现有一些用户疯狂的敲键盘输入,但是我们的搜索列表就是为空,所以希望每隔一定的时候就要去调用接口,所以当我们监听input的change事件的时候,需要使用到函数节流了,持续触发不会执行,但是到了一定的时间就会开始执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 函数节流的实现;</span><br><span class="line">function throttle(fn, delay) &#123;</span><br><span class="line">  var preTime &#x3D; Date.now();</span><br><span class="line">  return function() &#123;</span><br><span class="line">    var context &#x3D; this,</span><br><span class="line">    args &#x3D; arguments,</span><br><span class="line">    nowTime &#x3D; Date.now();</span><br><span class="line">    &#x2F;&#x2F; 如果两次时间间隔超过了指定时间，则执行函数。</span><br><span class="line">    if (nowTime - preTime &gt;&#x3D; delay) &#123;</span><br><span class="line">      preTime &#x3D; Date.now();</span><br><span class="line">      return fn.apply(context, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求。</p></blockquote><blockquote><p>函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件节流来降低事件调用的频率。</p></blockquote><p>以上就是我对防抖和节流的一些理解,如果文章由于我学识浅薄,导致您发现有严重谬误的地方,请一定在评论中指出,我会在第一时间修正我的博文,以避免误人子弟。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr style=&#39;filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)&#39; color=&#39;#FF0000&#39; size=&#39;1&#39; /&gt;

&lt;blockquote&gt;
&lt;p&gt;节流与防抖就像重绘和回流一样重要,都是为了提高性能,一直以为博客里面已经写了,结果发现没有,现在补一下&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="javaScript" scheme="https://www.chensheng.group/categories/javaScript/"/>
    
    
      <category term="javaScript" scheme="https://www.chensheng.group/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>css高频考题</title>
    <link href="https://www.chensheng.group/2021/09/01/146-css%E6%95%B4%E7%90%86/"/>
    <id>https://www.chensheng.group/2021/09/01/146-css%E6%95%B4%E7%90%86/</id>
    <published>2021-09-01T06:42:00.000Z</published>
    <updated>2021-09-03T06:53:58.157Z</updated>
    
    <content type="html"><![CDATA[<hr style='filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)' color='#FF0000' size='1' /><blockquote><p>整理了一下常见的css的问题</p></blockquote><a id="more"></a><h3 id="介绍一下标准的-CSS-的盒子模型"><a href="#介绍一下标准的-CSS-的盒子模型" class="headerlink" title="介绍一下标准的 CSS 的盒子模型"></a>介绍一下标准的 CSS 的盒子模型</h3><ul><li>有两种盒子模型：IE 盒模型（border-box）、W3C 标准盒模型（content-box）</li><li>盒模型：分为内容（content）、填充（padding）、边界（margin）、边框（border）四个部分</li></ul><p>IE 盒模型和 W3C 标准盒模型的区别：</p><ul><li>W3C 标准盒模型：属性 width，height 只包含内容 content，不包含 border 和 padding</li><li>IE 盒模型：属性 width，height 包含 content、border 和 padding，指的是 content + padding + border。</li></ul><blockquote><p>如果将 box-sizing 设为 border-box 则用的是 IE 盒模型。</p></blockquote><h3 id="CSS-选择符有哪些"><a href="#CSS-选择符有哪些" class="headerlink" title="CSS 选择符有哪些?"></a>CSS 选择符有哪些?</h3><ol><li>id 选择器（#myid）</li><li>类选择器（.myclassname）</li><li>标签选择器（div,h1,p）</li><li>后代选择器（h1 p）</li><li>相邻后代选择器（子）选择器（ul&gt;li）</li><li>兄弟选择器（li~a）</li><li>相邻兄弟选择器（li+a）</li><li>属性选择器（a[rel=”external”]）</li><li>伪类选择器（a:hover,li:nth-child）</li><li>伪元素选择器（::before、::after）</li><li>通配符选择器（*）</li></ol><h3 id="CSS-中哪些属性可以继承"><a href="#CSS-中哪些属性可以继承" class="headerlink" title="CSS 中哪些属性可以继承"></a>CSS 中哪些属性可以继承</h3><ul><li><p>字体系列属性<br>font、font-family、font-weight、font-size、font-style、font-variant、font-stretch、font-size-adjust</p></li><li><p>文本系列属性<br>text-indent、text-align、text-shadow、line-height、word-spacing、letter-spacing、text-transform、direction、color</p></li><li><p>表格布局属性<br>caption-sideborder-collapseempty-cells</p></li><li><p>列表属性<br>list-style-type、list-style-image、list-style-position、list-style</p></li><li><p>光标属性<br>cursor</p></li><li><p>元素可见性<br>visibility</p></li></ul><h3 id="CSS3-新增伪类有那些"><a href="#CSS3-新增伪类有那些" class="headerlink" title="CSS3 新增伪类有那些?"></a>CSS3 新增伪类有那些?</h3><ul><li>elem:nth-child(n)选中父元素下的第 n 个子元素，并且这个子元素的标签名为 elem，n可以接受具体的数值，也可以接受函数。</li><li>elem:nth-last-child(n)作用同上，不过是从后开始查找。</li><li>elem:last-child 选中最后一个子元素。</li><li>elem:only-child 如果 elem 是父元素下唯一的子元素，则选中之。</li><li>elem:nth-of-type(n)选中父元素下第 n 个 elem 类型元素，n 可以接受具体的数值，也可以接受函数。</li><li>elem:first-of-type 选中父元素下第一个 elem 类型元素。</li><li>elem:last-of-type 选中父元素下最后一个 elem 类型元素。</li><li>elem:only-of-type 如果父元素下的子元素只有一个 elem 类型元素，则选中该元素。</li><li>elem:empty 选中不包含子元素和内容的 elem 类型元素。</li><li>elem:target 选择当前活动的 elem 元素。</li><li>:not(elem)选择非 elem 元素的每个元素。</li><li>:enabled 控制表单控件的禁用状态。</li><li>:disabled 控制表单控件的禁用状态。</li><li>:checked 单选框或复选框被选中。</li></ul><h3 id="CSS3-有哪些新特性？"><a href="#CSS3-有哪些新特性？" class="headerlink" title="CSS3 有哪些新特性？"></a>CSS3 有哪些新特性？</h3><ul><li>圆角 （border-radius:8px）</li><li>多列布局 （multi-column layout）</li><li>阴影和反射 （Shadow\Reflect）</li><li>文字特效 （text-shadow）</li><li>文字渲染 （Text-decoration）</li><li>线性渐变 （gradient）</li><li>过渡 （transform）缩放，定位，倾斜，动画，多背景</li></ul><h3 id="解释一下-CSS3-的-Flexbox（弹性盒布局模型）"><a href="#解释一下-CSS3-的-Flexbox（弹性盒布局模型）" class="headerlink" title="解释一下 CSS3 的 Flexbox（弹性盒布局模型）"></a>解释一下 CSS3 的 Flexbox（弹性盒布局模型）</h3><p><a href="https://www.chensheng.group/2018/08/08/62-%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80%E6%B7%B1%E5%85%A5/">弹性布局深入</a></p><h3 id="width-auto-和-width-100-的区别"><a href="#width-auto-和-width-100-的区别" class="headerlink" title="width:auto 和 width:100%的区别"></a>width:auto 和 width:100%的区别</h3><ul><li><p>width:100%会使元素 box 的宽度等于父元素的 contentbox 的宽度。</p></li><li><p>width:auto 会使元素撑满整个父元素，margin、border、padding、content 区域会自动分配水平空间。</p></li></ul><h3 id="BFC规范的理解-css中常见的兼容性问题-margin-重叠问题的理解-怎么让-Chrome-支持小于-12px-的文字"><a href="#BFC规范的理解-css中常见的兼容性问题-margin-重叠问题的理解-怎么让-Chrome-支持小于-12px-的文字" class="headerlink" title="BFC规范的理解?css中常见的兼容性问题?margin 重叠问题的理解?怎么让 Chrome 支持小于 12px 的文字?"></a>BFC规范的理解?css中常见的兼容性问题?margin 重叠问题的理解?怎么让 Chrome 支持小于 12px 的文字?</h3><p><a href="https://www.chensheng.group/2018/02/24/55-%E5%85%B3%E4%BA%8ECSS%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B/">那些你不知道的CSS</a></p><h3 id="CSS-优化、提高性能的方法有哪些"><a href="#CSS-优化、提高性能的方法有哪些" class="headerlink" title="CSS 优化、提高性能的方法有哪些?"></a>CSS 优化、提高性能的方法有哪些?</h3><p>加载性能：</p><ol><li>css 压缩：将写好的 css 进行打包压缩，可以减少很多的体积。</li><li>css 单一样式：当需要下边距和左边距的时候，很多时候选择:margin:top 0 bottom 0;但margin-bottom:bottom;margin-left:left;执行的效率更高。</li><li>减少使用@import,而建议使用 link，因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行加载。</li></ol><p>选择器性能：</p><ol><li>关键选择器（keyselector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）。CSS 选择符是从右到左进行匹配的。当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等等；</li><li>如果规则拥有 ID 选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）。</li><li>避免使用通配规则，如*{}计算次数惊人！只对需要用到的元素进行选择。</li><li>尽量少的去对标签进行选择，而是用 class。</li><li>尽量少的去使用后代选择器，降低选择器的权重值。后代选择器的开销是最高的，尽量将选择器的深度降到最低，最高不要超过三层，更多的使用类来关联每一个标签元素。</li><li>了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则。</li></ol><p>渲染性能：</p><ol><li>慎重使用高性能属性：浮动、定位。</li><li>尽量减少页面重排、重绘。</li><li>去除空规则：｛｝。空规则的产生原因一般来说是为了预留样式。去除这些空规则无疑能减少 css 文档体积。</li><li>属性值为 0 时，不加单位。</li><li>属性值为浮动小数 0.**，可以省略小数点之前的 0。</li><li>标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后。</li><li>不使用@import 前缀，它会影响 css 的加载速度。</li><li>选择器优化嵌套，尽量避免层级过深。</li><li>css 雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，使用时，优劣考虑清楚，再使用。</li><li>正确使用 display 的属性，由于 display 的作用，某些样式组合会无效，徒增样式体积的同时也影响解析性能。</li><li>不滥用 web 字体。对于中文网站来说 WebFonts 可能很陌生，国外却很流行。webfonts通常体积庞大，而且一些浏览器在下载 webfonts 时会阻塞页面渲染损伤性能。</li></ol><p>可维护性、健壮性：</p><ol><li>将具有相同属性的样式抽离出来，整合并通过 class 在页面中进行使用，提高 css 的可维护性。</li><li>样式与内容分离：将 css 代码定义到外部 css 中。</li></ol><blockquote><p>上面的选择器性能的第一条,为什么CSS 选择符是从右到左进行匹配的 试想一下，如果采用从左至右的方式读取 CSS 规则，那么大多数规则读到最后（最右）才会发现是不匹配的，这样做会费时耗能，最后有很多都是无用的；而如果采取从右向左的方式，那么只要发现最右边选择器不匹配，就可以直接舍弃了，避免了许多无效匹配</p></blockquote><h3 id="在网页中应该使用奇数还是偶数的字体？为什么呢？"><a href="#在网页中应该使用奇数还是偶数的字体？为什么呢？" class="headerlink" title="在网页中应该使用奇数还是偶数的字体？为什么呢？"></a>在网页中应该使用奇数还是偶数的字体？为什么呢？</h3><ol><li>偶数字号相对更容易和 web 设计的其他部分构成比例关系。比如：当我用了 14px 的正文字号，我可能会在一些地方用 14×0.5=7px 的 margin，在另一些地方用 14×1.5=21px 的标题字号。</li><li>浏览器缘故，低版本的浏览器 ie6 会把奇数字体强制转化为偶数，即 13px 渲染为 14px。</li><li>系统差别，早期的 Windows 里，中易宋体点阵只有 12 和 14、15、16px，唯独缺少 13px。</li></ol><h3 id="如何修改-chrome-记住密码后自动填充表单的黄色背景？"><a href="#如何修改-chrome-记住密码后自动填充表单的黄色背景？" class="headerlink" title="如何修改 chrome 记住密码后自动填充表单的黄色背景？"></a>如何修改 chrome 记住密码后自动填充表单的黄色背景？</h3><p>chrome 表单自动填充后，input 文本框的背景会变成黄色的，通过审查元素可以看到这是由于 chrome 会默认给自动填充的 input 表单加上 input:-webkit-autofill 私有属性，然后对其赋予以下样式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  background-color:rgb(250,255,189)!important;</span><br><span class="line">  background-image:none!important;</span><br><span class="line">  color:rgb(0,0,0)!important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对 chrome 默认定义的 background-color，background-image，color 使用 important 是不能提高其优先级的，但是其他属性可使用</p><p>使用足够大的纯色内阴影来覆盖 input 输入框的黄色背景，处理如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">input:-webkit-autofill,textarea:-webkit-autofill,select:-webkit-autofill&#123;</span><br><span class="line">  -webkit-box-shadow: 000px 1000px white inset;</span><br><span class="line">  border: 1px solid #CCC !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="让页面里的字体变清晰，变细用-CSS-怎么做？"><a href="#让页面里的字体变清晰，变细用-CSS-怎么做？" class="headerlink" title="让页面里的字体变清晰，变细用 CSS 怎么做？"></a>让页面里的字体变清晰，变细用 CSS 怎么做？</h3><p>webkit 内核的私有属性：-webkit-font-smoothing，用于字体抗锯齿，使用后字体看起来会更清晰舒服。</p><p>在 MacOS 测试环境下面设置-webkit-font-smoothing:antialiased;但是这个属性仅仅是面向MacOS，其他操作系统设</p><h3 id="使用-rem-布局的优缺点"><a href="#使用-rem-布局的优缺点" class="headerlink" title="使用 rem 布局的优缺点"></a>使用 rem 布局的优缺点</h3><p>优点：<br>在屏幕分辨率千差万别的时代，只要将 rem 与屏幕分辨率关联起来就可以实现页面的整体缩放，使得在设备上的展现都统一起来了。而且现在浏览器基本都已经支持 rem 了，兼容性也非常的好。</p><p>缺点：</p><ol><li>在奇葩的 dpr 设备上表现效果不太好，比如一些华为的高端机型用 rem 布局会出现错乱。</li><li>使用 iframe 引用也会出现问题。</li><li>rem 在多屏幕尺寸适配上与当前两大平台的设计哲学不一致。即大屏的出现到底是为了看得又大又清楚，还是为了看的更多的问题。</li></ol><p>(…未完待续)</p>]]></content>
    
    <summary type="html">
    
      &lt;hr style=&#39;filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)&#39; color=&#39;#FF0000&#39; size=&#39;1&#39; /&gt;

&lt;blockquote&gt;
&lt;p&gt;整理了一下常见的css的问题&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://www.chensheng.group/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="https://www.chensheng.group/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>html高频考题</title>
    <link href="https://www.chensheng.group/2021/09/01/145-html%E6%95%B4%E7%90%86/"/>
    <id>https://www.chensheng.group/2021/09/01/145-html%E6%95%B4%E7%90%86/</id>
    <published>2021-09-01T06:33:00.000Z</published>
    <updated>2021-09-03T06:54:01.497Z</updated>
    
    <content type="html"><![CDATA[<hr style='filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)' color='#FF0000' size='1' /><blockquote><p>整理了一下常见的HTML的问题</p></blockquote><a id="more"></a><h3 id="DOCTYPE-的作用是什么"><a href="#DOCTYPE-的作用是什么" class="headerlink" title="DOCTYPE 的作用是什么?"></a>DOCTYPE 的作用是什么?</h3><!DOCTYPE><p>声明位于 HTML 文档中的第一行，处于 <html> 标签之前。告知浏览器的解析器用什么文档标准解析这个文档。</p><p>DOCTYPE 不存在或格式不正确会导致文档以兼容模式呈现。</p><h3 id="标准模式与兼容模式各有什么区别"><a href="#标准模式与兼容模式各有什么区别" class="headerlink" title="标准模式与兼容模式各有什么区别?"></a>标准模式与兼容模式各有什么区别?</h3><p>标准模式的渲染方式和 JS 引擎的解析方式都是以该浏览器支持的最高标准运行。</p><p>在兼容模式中，页面以宽松的向后兼容的方式显示，模拟老式浏览器的行为以防止站点无法工作。</p><h3 id="页面导入样式时，使用-link-和-import-有什么区别"><a href="#页面导入样式时，使用-link-和-import-有什么区别" class="headerlink" title="页面导入样式时，使用 link 和 @import 有什么区别?"></a>页面导入样式时，使用 link 和 @import 有什么区别?</h3><ul><li>从属关系区别。 @import 是 CSS 提供的语法规则，只有导入样式表的作用；link是 HTML 提供的标签，不仅可以加载 CSS 文件，还可以定义 RSS、rel 连接属性、引入网站图标等。</li><li>加载顺序区别。加载页面时，link 标签引入的 CSS 被同时加载；@import 引入的 CSS 将在页面加载完毕后被加载。</li><li>兼容性区别。@import 是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；link 标签作为 HTML 元素，不存在兼容性问题。</li><li>DOM 可控性区别。可以通过 JS 操作 DOM ，插入 link 标签来改变样式；由于DOM 方法是基于文档的，无法使用 @import 的方式插入样式。</li><li>link方式的样式的权重 高于@import的权重.</li></ul><h3 id="从敲入-URL-到渲染完成的整个过程"><a href="#从敲入-URL-到渲染完成的整个过程" class="headerlink" title="从敲入 URL 到渲染完成的整个过程"></a>从敲入 URL 到渲染完成的整个过程</h3><ul><li>用户输入 url 地址，浏览器根据域名寻找 IP 地址</li><li>浏览器向服务器发送 http 请求，如果服务器段返回以 301 之类的重定向，浏览器根据相应头中的 location 再次发送请求</li><li>服务器端接受请求，处理请求生成 html 代码，返回给浏览器，这时的 html 页面代码可能是经过压缩的</li><li>浏览器接收服务器响应结果，如果有压缩则首先进行解压处理，紧接着就是页面解析渲染</li><li>解析渲染该过程主要分为以下步骤：解析 HTML、构建 DOM 树、DOM 树与 CSS 样式进行附着构造呈现树</li><li>布局</li><li>绘制</li></ul><h3 id="什么是-DOM-和-BOM？"><a href="#什么是-DOM-和-BOM？" class="headerlink" title="什么是 DOM 和 BOM？"></a>什么是 DOM 和 BOM？</h3><ul><li>DOM 指的是文档对象模型，它指的是把文档当做一个对象来对待，这个对象主要定义了处理网页内容的方法和接口。</li><li>BOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。</li></ul><blockquote><p>BOM 的核心是 window, window 对象含有 location 对象、navigator 对象、screen 对象等子对象，并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对象的子对象。</p></blockquote><h3 id="浏览器的渲染原理-渲染引擎"><a href="#浏览器的渲染原理-渲染引擎" class="headerlink" title="浏览器的渲染原理(渲染引擎)"></a>浏览器的渲染原理(渲染引擎)</h3><ul><li>首先解析收到的文档，根据文档定义构建一颗 DOM 树，DOM 树是由DOM 元素及属性节点组成的；</li><li>然后对 CSS 进行解析，生成 CSSOM 规则树；</li><li>根据 DOM 树和 CSSOM 规则树构建 Render Tree。渲染树的节点被称为渲染对象，渲染对象是一个包含有颜色和大小等属性的矩形，渲染对象和DOM 对象相对应，但这种对应关系不是一对一的，不可见的 DOM 元素不会被插入渲染树。</li><li>当渲染对象被创建并添加到树中，它们并没有位置和大小，所以当浏览器生成渲染树以后，就会根据渲染树来进行布局（也可以叫做回流）。这一阶段浏览器要做的事情就是要弄清楚各个节点在页面中的确切位置和大小。通常这一行为也被称为“自动重排”。</li><li>布局阶段结束后是绘制阶段，比那里渲染树并调用对象的 paint 方法将它们的内容显示在屏幕上，绘制使用 UI 基础组件。</li></ul><p>所有的 html 解析完成之后再去构建和布局 render tree。它是解析完一部分内容就显示一部分内容，同时可能还在网络下载其余内容。</p><h3 id="浏览器解析过程-JS-引擎"><a href="#浏览器解析过程-JS-引擎" class="headerlink" title="浏览器解析过程(JS 引擎)"></a>浏览器解析过程(JS 引擎)</h3><p>JavaScript 的加载、解析与执行会阻塞文档的解析，也就是说，在构建 DOM 时，HTML解析器若遇到了 JavaScript，那么它会暂停文档的解析，将控制权移交给 JavaScript 引擎，等 JavaScript 引擎运行完毕，浏览器再从中断的地方恢复继续解析文档。</p><p>也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 script 标签放在 body 标签底部的原因。当然在当下，并不是说 script 标签必须放在底部，因为你可以给 script 标签添加 defer 或者 async 属性。</p><h3 id="什么是重绘和回流"><a href="#什么是重绘和回流" class="headerlink" title="什么是重绘和回流?"></a>什么是重绘和回流?</h3><p>重绘: 当渲染树中的一些元素需要更新属性，而这些属性只是影响元素的外观、风格，而不会影响布局的操作，比如 background color，我们将这样的操作称为重绘。<br>回流：当渲染树中的一部分（或全部）因为元素的规模尺寸、布局、隐藏等改变而需要重新构建的操作，会影响到布局的操作，这样的操作我们称为回流。</p><p>常见引起回流属性和方法:</p><blockquote><p>任何会改变元素几何信息（元素的位置和尺寸大小）的操作，都会触发回流。</p></blockquote><ol><li>添加或者删除可见的 DOM 元素；</li><li>元素尺寸改变——边距、填充、边框、宽度和高度</li><li>内容变化，比如用户在 input 框中输入文字</li><li>浏览器窗口尺寸改变——resize 事件发生时</li><li>计算 offsetWidth 和 offsetHeight 属性</li><li>设置 style 属性的值</li><li>当你修改网页的默认字体时。</li></ol><p>回流必定会发生重绘，重绘不一定会引发回流。回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列回流。</p><h3 id="Canvas-和-SVG-有什么区别"><a href="#Canvas-和-SVG-有什么区别" class="headerlink" title="Canvas 和 SVG 有什么区别?"></a>Canvas 和 SVG 有什么区别?</h3><p>Canvas 是一种通过 JavaScript 来绘制 2D 图形的方法。Canvas 是逐像素来进行渲染的，因此当我们对 Canvas 进行缩放时，会出现锯齿或者失真的情况。</p><p>SVG 是一种使用 XML 描述 2D 图形的语言。SVG 基于 XML，这意味着 SVG DOM 中的每个元素都是可用的。我们可以为某个元素附加 JavaScript 事件监听函数。并且 SVG 保存的是图形的绘制方法，因此当 SVG 图形缩放时并不会失真。</p><h3 id="浏览器架构"><a href="#浏览器架构" class="headerlink" title="浏览器架构"></a>浏览器架构</h3><ul><li>用户界面<ul><li>主进程</li><li>内核<ul><li>渲染引擎</li><li>JS 引擎<ul><li>执行栈</li></ul></li></ul></li><li>事件触发线程<ul><li>消息队列<ul><li>微任务</li><li>宏任务</li></ul></li></ul></li><li>网络异步线程</li><li>定时器线程</li></ul></li></ul><h3 id="常用的-meta-标签"><a href="#常用的-meta-标签" class="headerlink" title="常用的 meta 标签"></a>常用的 meta 标签</h3><p><a href="https://www.chensheng.group/2018/03/02/59-html5%E5%B8%B8%E7%94%A8%E7%9A%84meta%E6%A0%87%E7%AD%BE%E6%80%BB%E7%BB%93/">点击跳转</a></p><h3 id="disabled-和-readonly-的区别？"><a href="#disabled-和-readonly-的区别？" class="headerlink" title="disabled 和 readonly 的区别？"></a>disabled 和 readonly 的区别？</h3><ul><li>disabled 指当 input 元素加载时禁用此元素。input 内容不会随着表单提交。</li><li>readonly 规定输入字段为只读。input 内容会随着表单提交。</li><li>无论设置 readonly 还是 disabled，通过 js 脚本都能更改 input 的 value</li></ul><h3 id="扫描二维码登录网页是什么原理，前后两个事件是如何联系的？"><a href="#扫描二维码登录网页是什么原理，前后两个事件是如何联系的？" class="headerlink" title="扫描二维码登录网页是什么原理，前后两个事件是如何联系的？"></a>扫描二维码登录网页是什么原理，前后两个事件是如何联系的？</h3><p>浏览器获得一个临时 id，通过长连接等待客户端扫描带有此 id 的二维码后，从长连接中获得客户端上报给 server 的帐号信息进行展示。并在客户端点击确认后，此前获得的令牌或丢失、或失效，对授权过程形成有效的安全防护。</p><h3 id="get-请求传参长度的误区"><a href="#get-请求传参长度的误区" class="headerlink" title="get 请求传参长度的误区"></a>get 请求传参长度的误区</h3><p>误区：我们经常说 get 请求参数的大小存在限制，而 post 请求的参数大小是无限制的。</p><p>实际上 HTTP 协议从未规定 GET/POST 的请求长度限制是多少。对 get 请求参数的限制是来源与浏览器或 web 服务器，浏览器或 web 服务器限制了 url 的长度。</p><ol><li>HTTP 协议未规定 GET 和 POST 的长度限制</li><li>GET 的最大长度显示是因为浏览器和 web 服务器限制了 URI 的长度</li><li>不同的浏览器和 WEB 服务器，限制的最大长度不一样</li><li>要支持 IE，则最大长度为 2083byte，若只支持 Chrome，则最大长度8182byte</li></ol><p>(…未完待续)</p>]]></content>
    
    <summary type="html">
    
      &lt;hr style=&#39;filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)&#39; color=&#39;#FF0000&#39; size=&#39;1&#39; /&gt;

&lt;blockquote&gt;
&lt;p&gt;整理了一下常见的HTML的问题&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="面试" scheme="https://www.chensheng.group/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="https://www.chensheng.group/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>axios在XP系统的兼容问题</title>
    <link href="https://www.chensheng.group/2021/09/01/144-axios%E5%9C%A8XP%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/"/>
    <id>https://www.chensheng.group/2021/09/01/144-axios%E5%9C%A8XP%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/</id>
    <published>2021-09-01T05:30:00.000Z</published>
    <updated>2021-09-03T06:54:05.194Z</updated>
    
    <content type="html"><![CDATA[<hr style='filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)' color='#FF0000' size='1' /><blockquote><p>vue-cli 使用 axios 兼容 xp</p></blockquote><a id="more"></a><p>项目需要兼容XP,控制台查看报错发现是 <code>promise is undefined</code>, 项目中调用接口使用的是axios, axios又是基于promise上</p><p>所以需要添加一些插件进行兼容</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>看到一篇博客说可以使用bluebird.js解决。直接在页面引入bluebird.js问题就解决了。</p><p><a href="https://cdn.jsdelivr.net/bluebird/latest/bluebird.js" target="_blank" rel="noopener">bluebird.js下载地址</a></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p><code>npm install --save babel-polyfill</code></p><p>安装成功以后需要在main.js 中引入 babel-polyfill</p><p>一般会配置 webpack.base.config.js 中 entry</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  context: path.resolve(__dirname, &#39;..&#x2F;&#39;),</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: [&quot;babel-polyfill&quot;, &quot;.&#x2F;src&#x2F;main.js&quot;] </span><br><span class="line">    &#x2F;&#x2F; app: &#39;.&#x2F;src&#x2F;main.js&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搞定……</p>]]></content>
    
    <summary type="html">
    
      &lt;hr style=&#39;filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)&#39; color=&#39;#FF0000&#39; size=&#39;1&#39; /&gt;

&lt;blockquote&gt;
&lt;p&gt;vue-cli 使用 axios 兼容 xp&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="javaScript" scheme="https://www.chensheng.group/categories/javaScript/"/>
    
    
      <category term="javaScript" scheme="https://www.chensheng.group/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用SSH上传部署</title>
    <link href="https://www.chensheng.group/2021/08/31/143-%E4%BD%BF%E7%94%A8SSH%E4%B8%8A%E4%BC%A0%E9%83%A8%E7%BD%B2/"/>
    <id>https://www.chensheng.group/2021/08/31/143-%E4%BD%BF%E7%94%A8SSH%E4%B8%8A%E4%BC%A0%E9%83%A8%E7%BD%B2/</id>
    <published>2021-08-31T10:12:00.000Z</published>
    <updated>2021-09-03T06:54:08.718Z</updated>
    
    <content type="html"><![CDATA[<hr style='filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)' color='#FF0000' size='1' /><blockquote><p>上传git或者coding时使用ssh</p></blockquote><a id="more"></a><p>因为太久没有上传博客了,所以提交代码的时候发现git报错了,查了一下百度,发现git已经不能使用账户和密码了,需要使用账户和token</p><p>嫌太麻烦了,所以统一使用ssh来上传部署</p><h3 id="获取电脑的ssh公钥"><a href="#获取电脑的ssh公钥" class="headerlink" title="获取电脑的ssh公钥"></a>获取电脑的ssh公钥</h3><p>打开 C盘/用户/.ssh/ 用文本编辑器打开 id_rsa.pub 文件（此处是生成公钥的默认名称，如果生成公钥时采用了其他名称，打开相对应的文件即可），复制全部内容。</p><h3 id="coding"><a href="#coding" class="headerlink" title="coding"></a>coding</h3><ul><li>登录 CODING ，点击右上角【个人设置】，选择菜单【SSH 公钥】，点击【新增公钥】按钮</li><li>将第一步中复制的内容填写到【公钥内容】一栏，公钥名称按需填写即可。</li><li>设定公钥有效期，可选择具体日期或设置永久有效。</li><li>点击【添加】，然后输入账户密码即可成功添加公钥。</li><li>完成后在命令行测试，首次建立链接会要求信任主机。命令 ssh -T <a href="mailto:git@e.coding.net">git@e.coding.net</a></li></ul><h4 id="添加部署公钥"><a href="#添加部署公钥" class="headerlink" title="添加部署公钥"></a>添加部署公钥</h4><ul><li>登录 CODING，进入目标项目，点击【代码仓库】-&gt; 【仓库设置】-&gt; 【部署公钥】-&gt;【新建部署公钥】</li><li>将第一步中复制的内容填写到【公钥内容】一栏，公钥名称自定义。</li><li>点击【新建】，然后输入账户密码即可成功添加部署公钥</li><li>部署公钥默认拥有该项目的只读权限，如果需要获取推送权限，请勾选部署公钥设置里的【授予推送权限】</li></ul><blockquote><p>配置好后,在仓库设置的基本设置里可以找到自己的SSH地址, SSH 协议的 Git 仓库地址示例所示：<a href="mailto:git@e.coding.net">git@e.coding.net</a>:team-name/project-name.git</p></blockquote><p><a href="https://help.coding.net/docs/project-settings/ssh.html" target="_blank" rel="noopener">coding官网配置ssh</a></p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>其他的配置都和coding一样,这里就不重复说明了,说一下git在哪里配置的</p><p><a href="https://img-blog.csdnimg.cn/20201223152106902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbGVuY2VfcGlub3Q=,size_16,color_FFFFFF,t_70#pic_center#pic_center" target="_blank" rel="noopener">gittu</a></p><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><p>都OK了的话,在hexo的_config.yml写一下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">## 使用SSh公钥来配置</span><br><span class="line">deploy:</span><br><span class="line">  - type: git</span><br><span class="line">    repo: </span><br><span class="line">      github: git@github.com:name&#x2F;project.github.io.git</span><br><span class="line">      coding: git@e.coding.net:team-name&#x2F;project-name.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>以上就是我对SSH上传部署的一些理解,如果文章由于我学识浅薄,导致您发现有严重谬误的地方,请一定在评论中指出,我会在第一时间修正我的博文,以避免误人子弟。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr style=&#39;filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)&#39; color=&#39;#FF0000&#39; size=&#39;1&#39; /&gt;

&lt;blockquote&gt;
&lt;p&gt;上传git或者coding时使用ssh&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="javaScript" scheme="https://www.chensheng.group/categories/javaScript/"/>
    
    
      <category term="javaScript" scheme="https://www.chensheng.group/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>深入理解垃圾回收原理</title>
    <link href="https://www.chensheng.group/2021/08/30/142-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%8E%9F%E7%90%86/"/>
    <id>https://www.chensheng.group/2021/08/30/142-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%8E%9F%E7%90%86/</id>
    <published>2021-08-30T13:35:00.000Z</published>
    <updated>2021-09-03T06:54:12.698Z</updated>
    
    <content type="html"><![CDATA[<hr style='filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)' color='#FF0000' size='1' /><blockquote><p>前一阵子由于网站拿去ICP的备案,所以停了一段时间,现在备案下来了,我们来学习一下垃圾回收</p></blockquote><a id="more"></a><h3 id="什么是垃圾回收"><a href="#什么是垃圾回收" class="headerlink" title="什么是垃圾回收"></a>什么是垃圾回收</h3><p>垃圾回收是一种自动的内存管理机制。当计算机上的动态内存不再需要时，就应该予以释放，以让出内存。</p><p>直白点讲，就是程序是运行在内存里的，当声明一个变量、定义一个函数时都会占用内存。内存的容量是有限的，如果变量、函数等只有产生没有消亡的过程，那迟早内存有被完全占用的时候。</p><p>这个时候，不仅自己的程序无法正常运行，连其他程序也会受到影响。</p><p>所以，在计算机中，我们需要垃圾回收。需要注意的是，定义中的“自动”的意思是语言可以帮助我们回收内存垃圾，但并不代表我们不用关心内存管理，如果操作失当，JavaScript 中依旧会出现内存溢出的情况。</p><h3 id="垃圾回收原理"><a href="#垃圾回收原理" class="headerlink" title="垃圾回收原理"></a>垃圾回收原理</h3><p>垃圾回收基于两个原理：</p><ul><li>考虑某个变量或对象在未来的程序运行中将不会被访问</li><li>向这些对象要求归还内存</li></ul><p>而这两个原理中，最主要的也是最艰难的部分就是找到“所分配的内存确实已经不再需要了”。</p><p>在解释这些之前,我们要先了解一下名词-GC</p><h3 id="什么是GC"><a href="#什么是GC" class="headerlink" title="什么是GC"></a>什么是GC</h3><p>GC可以理解为在追踪仍然使用的所有对象，并将其余对象标记为垃圾然后进行回收，这样的一个过程称之为GC，所有的GC系统可以从如下几个方面进行实现</p><ul><li>GC判断策略（例如引用计数，对象可达）</li><li>GC收集算法（标记清除法，标记清除整理法，标记复制清除法，分带法）</li><li>GC收集器（例如Serial，Parallel，CMS，G1）</li></ul><h3 id="V8垃圾回收策略"><a href="#V8垃圾回收策略" class="headerlink" title="V8垃圾回收策略"></a>V8垃圾回收策略</h3><p>V8的垃圾回收策略基于分代回收机制，该机制又基于<a href="https://www.memorymanagement.org/glossary/g.html#generational%20hypothesis" target="_blank" rel="noopener">世代假说</a>。该假说有两个特点：</p><ul><li>大部分新生对象倾向于早死；</li><li>不死的对象，会活得更久。</li></ul><p>基于这个理论，现代垃圾回收算法根据对象的存活时间将内存进行了分代，并对不同分代的内存采用不同的高效算法进行垃圾回收。</p><h3 id="V8的内存分代"><a href="#V8的内存分代" class="headerlink" title="V8的内存分代"></a>V8的内存分代</h3><p>在V8中，将内存分为了新生代（new space）和老生代（old space）。它们特点如下：</p><ul><li>新生代：对象的存活时间较短。新生对象或只经过一次垃圾回收的对象。</li><li>老生代：对象存活时间较长。经历过一次或多次垃圾回收的对象。</li></ul><blockquote><p>V8堆的空间等于新生代空间加上老生代空间，默认设置下，64位系统的老生代大小为1400M，32位系统为700M。</p></blockquote><h3 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h3><h4 id="Stop-The-World-（全停顿）"><a href="#Stop-The-World-（全停顿）" class="headerlink" title="Stop The World （全停顿）"></a>Stop The World （全停顿）</h4><p>在介绍垃圾回收算法之前，我们先了解一下「全停顿」。垃圾回收算法在执行前，需要将应用逻辑暂停，执行完垃圾回收后再执行应用逻辑，这种行为称为 「全停顿」（Stop The World）</p><p>全停顿的目的，是为了解决应用逻辑与垃圾回收器看到的情况不一致的问题。举个例子，在自助餐厅吃饭，高高兴兴地取完食物回来时，结果发现自己餐具被服务员收走了。这里，服务员好比垃圾回收器，餐具就像是分配的对象，我们就是应用逻辑。在我们看来，只是将餐具临时放在桌上，但是服务员看来觉得你已经不需要使用了，因此就收走了。你与服务员对于同一个事物看到的情况是不一致，导致服务员做了与我们不期望的事情。因此，为避免应用逻辑与垃圾回收器看到的情况不一致，垃圾回收算法在执行时，需要停止应用逻辑。</p><h4 id="引用计数（reference-counting）"><a href="#引用计数（reference-counting）" class="headerlink" title="引用计数（reference counting）"></a>引用计数（reference counting）</h4><p>在V8回收之前,低版本 IE大多数用的是这种的方法</p><p>在内存管理环境中，对象 A 如果有访问对象 B 的权限，叫做对象 A 引用对象 B。引用计数的策略是将“对象是否不再需要”简化成“对象有没有其他对象引用到它”，如果没有对象引用这个对象，那么这个对象将会被回收。上例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let obj1 &#x3D; &#123; a: 1 &#125;; &#x2F;&#x2F; 一个对象（称之为 A）被创建，赋值给 obj1，A 的引用个数为 1 </span><br><span class="line">let obj2 &#x3D; obj1; &#x2F;&#x2F; A 的引用个数变为 2</span><br><span class="line"></span><br><span class="line">obj1 &#x3D; 0; &#x2F;&#x2F; A 的引用个数变为 1</span><br><span class="line">obj2 &#x3D; 0; &#x2F;&#x2F; A 的引用个数变为 0，此时对象 A 就可以被垃圾回收了</span><br></pre></td></tr></table></figure><p>但是引用计数有个最大的问题： 循环引用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function func() &#123;</span><br><span class="line">  let obj1 &#x3D; &#123;&#125;;</span><br><span class="line">  let obj2 &#x3D; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  obj1.a &#x3D; obj2; &#x2F;&#x2F; obj1 引用 obj2</span><br><span class="line">  obj2.a &#x3D; obj1; &#x2F;&#x2F; obj2 引用 obj1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当函数 func 执行结束后，返回值为 undefined，所以整个函数以及内部的变量都应该被回收，但根据引用计数方法，obj1 和 obj2 的引用次数都不为 0，所以他们不会被回收。</p><p>要解决循环引用的问题，最好是在不使用它们的时候手工将它们设为空。上面的例子可以这么做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj1 &#x3D; null;</span><br><span class="line">obj2 &#x3D; null;</span><br></pre></td></tr></table></figure><p>这个方法被称为“解除引用”。</p><h4 id="Scavenge算法"><a href="#Scavenge算法" class="headerlink" title="Scavenge算法"></a>Scavenge算法</h4><p>在分代的基础上,新生代中的对象主要通过Scavenge算法进行垃圾回收,在Scavenge的具体 实现中,主要采用了Cheney算法</p><p>Cheney算法采用复制的方式进行垃圾回收。它将堆内存一分为二，每一部分空间称为 semispace。这两个空间，只有一个空间处于使用中，另一个则处于闲置。使用中的 semispace 称为 「From 空间」，闲置的 semispace 称为 「To 空间」。</p><p>过程如下: </p><ol><li>从 From 空间分配对象，若 semispace 被分配满，则执行 Scavenge 算法进行垃圾回收。</li><li>检查 From 空间的存活对象，若对象存活，则检查对象是否符合晋升条件，若符合条件则晋升到老生代，否则将对象从 From 空间复制到 To 空间。</li><li>若对象不存活，则释放不存活对象的空间。</li><li>完成复制后，将 From 空间与 To 空间进行角色翻转（flip）。</li></ol><p><img src="https://csblogimage.oss-cn-hangzhou.aliyuncs.com/142-1-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.jpg" alt="算法示意图"></p><h5 id="对象晋升"><a href="#对象晋升" class="headerlink" title="对象晋升"></a>对象晋升</h5><p>第二点提到的对象晋升,条件有两个: </p><ul><li>对象是否经历过Scavenge回收。</li><li>To 空间的内存使用占比是否超过限制(25%)。</li></ul><blockquote><p>Scavenge 算法的缺点是，它的算法机制决定了只能利用一半的内存空间。但是新生代中的对象生存周期短、存活对象少，进行对象复制的成本不是很高，因而非常适合这种场景。</p></blockquote><h4 id="标记-清除（mark-and-sweep）"><a href="#标记-清除（mark-and-sweep）" class="headerlink" title="标记-清除（mark and sweep）"></a>标记-清除（mark and sweep）</h4><p>这是 JavaScript 中最常见的垃圾回收方式</p><p>从 2012 年起，所有现代浏览器都使用了标记-清除的垃圾回收方法，除了低版本 IE…它们采用的是引用计数方法。</p><p>那什么叫标记清除呢？JavaScript 中有个全局对象，浏览器中是 window。定期的，垃圾回收期将从这个全局对象开始，找所有从这个全局对象开始引用的对象，再找这些对象引用的对象…对这些活着的对象进行标记，这是标记阶段。清除阶段会对标记的对象会与内存中的对象进行比较，然后清除内存中那些没有标记的对象。</p><p>标记－清除法的一个问题就是不那么有效率，因为在标记－清除阶段，整个程序将会等待，所以如果程序出现卡顿的情况，那有可能是收集垃圾的过程。</p><p><img src="https://csblogimage.oss-cn-hangzhou.aliyuncs.com/142-2-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.jpg.jpg" alt="算法示意图"></p><h4 id="增量标记"><a href="#增量标记" class="headerlink" title="增量标记"></a>增量标记</h4><p>在新生代中，由于存活对象少，垃圾回收效率高，全停顿时间短，造成的影响小。但是老生代中，存活对象多，垃圾回收时间长，全停顿造成的影响大。为了减少全停顿的时间，V8对标记进行了优化，将一次停顿进行的标记过程，分成了很多小步。每执行完一小步就让应用逻辑执行一会儿，这样交替多次后完成标记。</p><blockquote><p>长时间的GC，会导致应用暂停和无响应，将会导致糟糕的用户体验。从2011年起，v8就将「全暂停」标记换成了增量标记。改进后的标记方式，最大停顿时间减少到原来的1/6。</p></blockquote><p>以上就是我对垃圾回收的一些理解,如果文章由于我学识浅薄,导致您发现有严重谬误的地方,请一定在评论中指出,我会在第一时间修正我的博文,以避免误人子弟。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr style=&#39;filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)&#39; color=&#39;#FF0000&#39; size=&#39;1&#39; /&gt;

&lt;blockquote&gt;
&lt;p&gt;前一阵子由于网站拿去ICP的备案,所以停了一段时间,现在备案下来了,我们来学习一下垃圾回收&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="javaScript" scheme="https://www.chensheng.group/categories/javaScript/"/>
    
    
      <category term="javaScript" scheme="https://www.chensheng.group/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>uniapp与webview之间的相互传值</title>
    <link href="https://www.chensheng.group/2021/04/19/141-uniapp%E4%B8%8Ewebview%E4%B9%8B%E9%97%B4%E7%9A%84%E7%9B%B8%E4%BA%92%E4%BC%A0%E5%80%BC/"/>
    <id>https://www.chensheng.group/2021/04/19/141-uniapp%E4%B8%8Ewebview%E4%B9%8B%E9%97%B4%E7%9A%84%E7%9B%B8%E4%BA%92%E4%BC%A0%E5%80%BC/</id>
    <published>2021-04-19T13:41:00.000Z</published>
    <updated>2021-06-20T14:05:13.752Z</updated>
    
    <content type="html"><![CDATA[<hr style='filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)' color='#FF0000' size='1' /><blockquote><p>在uniApp中,有时候我们需要外嵌一个H5在我们的webview中,那怎么让他们之前进行相互传值</p></blockquote><a id="more"></a><div class="note primary">            <p>以下代码都是在真机调试中测试的,有一些方法是只有uniapp运行到真机中才可以使用的</p>          </div><h3 id="引入的H5文件"><a href="#引入的H5文件" class="headerlink" title="引入的H5文件"></a>引入的H5文件</h3><p>这个H5的例子官方是已经有了的,需要注意的就是引入的<code>uni.webview.1.5.2.js</code></p><p>我不知道为什么引入外部cdn(<a href="https://js.cdn.aliyun.dcloud.net.cn/dev/uni-app/uni.webview.1.5.2.js" target="_blank" rel="noopener">https://js.cdn.aliyun.dcloud.net.cn/dev/uni-app/uni.webview.1.5.2.js</a>) 会失效,所以我都是将js下载下来,进行本地引入</p><p>H5的源码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">.btn &#123;</span><br><span class="line">display: block;</span><br><span class="line">margin: 20px auto;</span><br><span class="line">padding: 5px;</span><br><span class="line">background-color: #007aff;</span><br><span class="line">border: 0;</span><br><span class="line">color: #ffffff;</span><br><span class="line">height: 40px;</span><br><span class="line">width: 200px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.btn-red &#123;</span><br><span class="line">background-color: #dd524d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.btn-yellow &#123;</span><br><span class="line">background-color: #f0ad4e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.desc &#123;</span><br><span class="line">padding: 10px;</span><br><span class="line">color: #999999;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;desc&quot;&gt;web-view 组件加载本地 html 示例，仅在 App 环境下生效。点击下列按钮，跳转至其它页面。&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;mui-content&quot;&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;div1&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; capture&#x3D;&#39;camera&#39; accept&#x3D;&#39;image&#x2F;*&#39;&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;btn-list&quot;&gt;</span><br><span class="line">&lt;button class&#x3D;&quot;btn&quot; type&#x3D;&quot;button&quot; data-action&#x3D;&quot;navigateTo&quot;&gt;navigateTo&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button class&#x3D;&quot;btn&quot; type&#x3D;&quot;button&quot; data-action&#x3D;&quot;redirectTo&quot;&gt;redirectTo&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button class&#x3D;&quot;btn&quot; type&#x3D;&quot;button&quot; data-action&#x3D;&quot;navigateBack&quot;&gt;navigateBack&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button class&#x3D;&quot;btn&quot; type&#x3D;&quot;button&quot; data-action&#x3D;&quot;reLaunch&quot;&gt;reLaunch&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button class&#x3D;&quot;btn&quot; type&#x3D;&quot;button&quot; data-action&#x3D;&quot;switchTab&quot;&gt;switchTab&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;p class&#x3D;&quot;desc&quot;&gt;网页向应用发送消息。注意：小程序端应用会在此页面后退时接收到消息。&lt;&#x2F;p&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;btn-list&quot;&gt;</span><br><span class="line">&lt;button class&#x3D;&quot;btn btn-red&quot; type&#x3D;&quot;button&quot; id&#x3D;&quot;postMessage&quot;&gt;postMessage&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;!-- uni 的 SDK --&gt;</span><br><span class="line">&lt;!-- &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;https:&#x2F;&#x2F;js.cdn.aliyun.dcloud.net.cn&#x2F;dev&#x2F;uni-app&#x2F;uni.webview.1.5.2.js&quot;&gt;&lt;&#x2F;script&gt; --&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;uni.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">document.addEventListener(&#39;UniAppJSBridgeReady&#39;, function() &#123;</span><br><span class="line">document.querySelector(&#39;.btn-list&#39;).addEventListener(&#39;click&#39;, function(evt) &#123;</span><br><span class="line">var target &#x3D; evt.target;</span><br><span class="line">if (target.tagName &#x3D;&#x3D;&#x3D; &#39;BUTTON&#39;) &#123;</span><br><span class="line">var action &#x3D; target.getAttribute(&#39;data-action&#39;);</span><br><span class="line">switch (action) &#123;</span><br><span class="line">case &#39;switchTab&#39;:</span><br><span class="line">uni.switchTab(&#123;</span><br><span class="line">url: &#39;&#x2F;pages&#x2F;tabBar&#x2F;API&#x2F;API&#39;</span><br><span class="line">&#125;);</span><br><span class="line">break;</span><br><span class="line">case &#39;reLaunch&#39;:</span><br><span class="line">uni.reLaunch(&#123;</span><br><span class="line">url: &#39;&#x2F;pages&#x2F;tabBar&#x2F;API&#x2F;API&#39;</span><br><span class="line">&#125;);</span><br><span class="line">break;</span><br><span class="line">case &#39;navigateBack&#39;:</span><br><span class="line">uni.navigateBack(&#123;</span><br><span class="line">delta: 1</span><br><span class="line">&#125;);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">uni[action](&#123;</span><br><span class="line">url: &#39;&#x2F;pages&#x2F;component&#x2F;button&#x2F;button&#39;</span><br><span class="line">&#125;);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">document.querySelector(&quot;#postMessage&quot;).addEventListener(&#39;click&#39;, function() &#123;</span><br><span class="line">uni.postMessage(&#123;</span><br><span class="line">data: &#123;</span><br><span class="line">action: &#39;message&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line">      function ajaxRequest(a)&#123;</span><br><span class="line">        alert(&#39;接收到的参数: &#39;, a);</span><br><span class="line">      &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="H5-发送数据到-uniapp"><a href="#H5-发送数据到-uniapp" class="headerlink" title="H5 发送数据到 uniapp"></a>H5 发送数据到 uniapp</h3><ul><li>H5使用uni.postMessage发送数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">uni.postMessage(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    action: &#39;message&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>webview使用@message进行监听</li></ul><p>具体源码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;web-view ref&#x3D;&#39;webview&#39; src&#x3D;&quot;&#x2F;hybrid&#x2F;html&#x2F;local.html&quot;@message&#x3D;&quot;handleMessage&quot; &gt;&lt;&#x2F;web-view&gt;</span><br><span class="line">  &lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleMessage(evt) &#123;</span><br><span class="line">      console.log(&#39;接收到的消息：&#39; + JSON.stringify(evt.detail.data));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>H5页面的postMessage就是向uniapp发送消息</p><div class="note info">            <p>需要注意的是这里的src引入,我这里引入的是本地文件,所以跟着官方的文档走,放在<code>/hybrid/html/</code>的路径下</p>          </div><h3 id="uniapp-发送数据到-H5"><a href="#uniapp-发送数据到-H5" class="headerlink" title="uniapp 发送数据到 H5"></a>uniapp 发送数据到 H5</h3><p>百度上大部分的答案都是 通过url就可以向H5进行传参 </p><p>这种当然也可以,在H5中,再去获取url中的参数值,但是这种方法只能用在第一次</p><p>接下来后续应该怎么传递参数呢</p><blockquote><p>获取到这个webview的元素,然后就可以使用evalJS方法了</p></blockquote><p>但是这一步卡了我很久</p><p>因为百度到的都是<code>this.$mp.page.$getAppWebview()</code>这样的方法</p><p>但是 uniapp编译app时使用的都是webview,this.$mp.page.$getAppWebview()获取的是父webview. 所以一直没有evalJS方法</p><p>需要打点<code>.children()[0];</code>获取到子级,才是当前的webview</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const webview &#x3D; this.$mp.page.$getAppWebview().children()[0]; </span><br><span class="line">var name &#x3D; &#39;mike&#39;;</span><br><span class="line">webview.evalJS(&quot;ajaxRequest(&#39;&quot; + name + &quot;&#39;)&quot;);</span><br></pre></td></tr></table></figure><p>然后使用<code>evalJS</code>去调用方法就行</p><div class="note warning">            <p>注意evalJS方法里的 单引号 和 双引号</p>          </div><p>在H5中,只要有对应的方法就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function ajaxRequest(a)&#123;</span><br><span class="line">  alert(&#39;接收到的参数: &#39;, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>获取当前的webview,也可以使用下面这种方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var pages &#x3D; getCurrentPages();  </span><br><span class="line">var page &#x3D; pages[pages.length - 1];  </span><br><span class="line">var webview &#x3D; page.$getAppWebview(); &#x2F;&#x2F;页面栈最顶层就是当前webview</span><br></pre></td></tr></table></figure><div class="note warning">            <p>getCurrentPages() 方法是 uniapp 中自带的</p>          </div><p>以上就是我对uniapp与webview之间的相互传值的一些理解,如果文章由于我学识浅薄,导致您发现有严重谬误的地方,请一定在评论中指出,我会在第一时间修正我的博文,以避免误人子弟。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr style=&#39;filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)&#39; color=&#39;#FF0000&#39; size=&#39;1&#39; /&gt;

&lt;blockquote&gt;
&lt;p&gt;在uniApp中,有时候我们需要外嵌一个H5在我们的webview中,那怎么让他们之前进行相互传值&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="uniApp" scheme="https://www.chensheng.group/categories/uniApp/"/>
    
    
      <category term="uniApp" scheme="https://www.chensheng.group/tags/uniApp/"/>
    
  </entry>
  
  <entry>
    <title>coding配置腾讯云证书</title>
    <link href="https://www.chensheng.group/2021/02/11/139-coding%E9%85%8D%E7%BD%AE%E8%85%BE%E8%AE%AF%E4%BA%91%E8%AF%81%E4%B9%A6/"/>
    <id>https://www.chensheng.group/2021/02/11/139-coding%E9%85%8D%E7%BD%AE%E8%85%BE%E8%AE%AF%E4%BA%91%E8%AF%81%E4%B9%A6/</id>
    <published>2021-02-11T06:57:00.000Z</published>
    <updated>2021-02-11T07:12:50.136Z</updated>
    
    <content type="html"><![CDATA[<hr style='filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)' color='#FF0000' size='1' /><blockquote><p>小小的记录,以免以后忘记了</p></blockquote><a id="more"></a><p>今天写完博客,发现网站的证书过期了,以往都是coding每次免费3个月的证书,但是现在coding和腾讯云合作了,要用腾讯云的证书了</p><ol><li><p>首先在coding中静态网站上看看自定义域名是否通过,因为coding的整体升级,于是CNAME指向也改了,我的域名是在阿里云上的,所以需要在阿里云的域名解析中重新添加</p></li><li><p>通过后就可以去申请腾讯云的证书了,他有免费一年的证书,可以找一找,然后填写一下资料,自己的域名和邮箱</p></li><li><p>第二步验证的方式使用DNS验证,同样的,在阿里云的域名解析中添加验证</p></li><li><p>成功后就会签发证书,就可以进行部署了</p></li><li><p>部署的时候选择腾讯云托管证书,在证书列表中选择刚刚签发的证书,回源协议选择HTTP或者HTTPS都可以</p></li><li><p>腾讯云证书部署成功后,在第一步的coding的静态网站中重新部署一下你的网站,这样就成功了(我最后一步一直没有重新部署,所以我一直以为我的证书部署失败了)</p></li><li><p>中途如果有部署失败的,应该是你的域名也指向了github,先把指向github的给暂停</p></li></ol><p>至此,博客的证书又可以白嫖一年了</p>]]></content>
    
    <summary type="html">
    
      &lt;hr style=&#39;filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)&#39; color=&#39;#FF0000&#39; size=&#39;1&#39; /&gt;

&lt;blockquote&gt;
&lt;p&gt;小小的记录,以免以后忘记了&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="SSL证书" scheme="https://www.chensheng.group/categories/SSL%E8%AF%81%E4%B9%A6/"/>
    
    
      <category term="SSL证书" scheme="https://www.chensheng.group/tags/SSL%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>关于CSS的一些事(2)</title>
    <link href="https://www.chensheng.group/2021/02/11/140-%E5%85%B3%E4%BA%8ECSS%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B(2)/"/>
    <id>https://www.chensheng.group/2021/02/11/140-%E5%85%B3%E4%BA%8ECSS%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B(2)/</id>
    <published>2021-02-11T06:57:00.000Z</published>
    <updated>2021-09-03T06:54:25.575Z</updated>
    
    <content type="html"><![CDATA[<hr style='filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)' color='#FF0000' size='1' /><blockquote><p>记录一些实用的CSS</p></blockquote><a id="more"></a><h3 id="全屏灰色（特殊日期使用）"><a href="#全屏灰色（特殊日期使用）" class="headerlink" title="全屏灰色（特殊日期使用）"></a>全屏灰色（特殊日期使用）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.filter &#123;</span><br><span class="line">  -webkit-filter: grayscale(100%); &#x2F;* webkit *&#x2F;</span><br><span class="line">  -moz-filter: grayscale(100%); &#x2F;*firefox*&#x2F;</span><br><span class="line">  -ms-filter: grayscale(100%); &#x2F;*ie9*&#x2F;</span><br><span class="line">  -o-filter: grayscale(100%); &#x2F;*opera*&#x2F;</span><br><span class="line">  filter: grayscale(100%);</span><br><span class="line">  filter: progid:DXImageTransform.Microsoft.BasicImage(grayscale&#x3D;1); &#x2F;*ie*&#x2F;</span><br><span class="line">  filter: gray; &#x2F;*ie9- *&#x2F;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;html class&#x3D;&quot;filter&quot;&gt;</span><br><span class="line">  &lt;img src&#x3D;&quot;https:&#x2F;&#x2F;cdn.pixabay.com&#x2F;photo&#x2F;2015&#x2F;04&#x2F;20&#x2F;17&#x2F;01&#x2F;flower-731830_960_720.jpg&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="卡券贴"><a href="#卡券贴" class="headerlink" title="卡券贴"></a>卡券贴</h3><p>在CSS3当中，background添加了background-size属性，控制背景图片的大小，配合background-position属性，可以在一个背景下面展示多张图片。</p><p>卡券贴的核心是使用透明白色径向渐变radial-gradient，分别让4张背景图中的左下角、右下角、右上角和左下角出现缺省，再利用drop-shadow实现元素阴影，从而达到效果。</p><p>radial-gradient语法如下：</p><blockquote><p>radial-gradient(shape size at position, start-color, …, last-color)</p></blockquote><p><img src="https://pic2.zhimg.com/80/v2-0e2b43fad0beebc5c13b3c7983b5ca45_720w.jpg" alt="属性说明"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.coupon&#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 80px;</span><br><span class="line">  background: radial-gradient(circle at right bottom, transparent 10px, #ffffff 0) top right &#x2F; 50% 40px no-repeat,</span><br><span class="line">    radial-gradient(circle at left bottom, transparent 10px, #ffffff 0) top left &#x2F; 50% 40px no-repeat,</span><br><span class="line">    radial-gradient(circle at right top, transparent 10px, #ffffff 0) bottom right &#x2F; 50% 40px no-repeat,</span><br><span class="line">    radial-gradient(circle at left top, transparent 10px, #ffffff 0) bottom left &#x2F; 50% 40px no-repeat;</span><br><span class="line">  filter: drop-shadow(3px 3px 3px #c5c5c5);</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;coupon&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="文本溢出自动省略号"><a href="#文本溢出自动省略号" class="headerlink" title="文本溢出自动省略号"></a>文本溢出自动省略号</h3><p>这个在项目中经常用到,但是一直都记不住</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.ellipsis &#123;</span><br><span class="line">  width: 500px;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  text-overflow: ellipsis;</span><br><span class="line">  white-space: nowrap;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;ellipsis&quot;&gt;</span><br><span class="line">  明月几时有，把酒问青天。不知天上宫阙，今夕是何年。我欲乘风归去，又恐琼楼玉宇，高处不胜寒。起舞弄清影，何似在人间。</span><br><span class="line">  转朱阁，低绮户，照无眠。不应有恨，何事长向别时圆？人有悲欢离合，月有阴晴圆缺，此事古难全。但愿人长久，千里共婵娟。</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h3 id="记录其他的好的链接"><a href="#记录其他的好的链接" class="headerlink" title="记录其他的好的链接"></a>记录其他的好的链接</h3><p>大神的作品,转载知乎</p><p><a href="https://zhuanlan.zhihu.com/p/158672754" target="_blank" rel="noopener">戳我跳转</a></p><p>总是记不住,但是要用到的样式 </p><p><a href="https://zhuanlan.zhihu.com/p/231014167" target="_blank" rel="noopener">戳我跳转</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr style=&#39;filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)&#39; color=&#39;#FF0000&#39; size=&#39;1&#39; /&gt;

&lt;blockquote&gt;
&lt;p&gt;记录一些实用的CSS&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="https://www.chensheng.group/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://www.chensheng.group/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>vue源码学习-diff算法原理</title>
    <link href="https://www.chensheng.group/2021/02/11/138-vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-diff%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/"/>
    <id>https://www.chensheng.group/2021/02/11/138-vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-diff%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/</id>
    <published>2021-02-11T03:33:00.000Z</published>
    <updated>2021-02-11T06:57:50.417Z</updated>
    
    <content type="html"><![CDATA[<hr style='filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)' color='#FF0000' size='1' /><blockquote><p>今天就是除夕了,也只有放假才有时间写一写博客,把欠下的博客都补上</p></blockquote><a id="more"></a><p>diff算法是我们在学习vue时经常听到的,像什么vue异步更新DOM,虚拟DOM的变化,都和diff算法有关,那什么是diff算法,他的作用又是什么呢</p><h3 id="diff算法的时间复杂度"><a href="#diff算法的时间复杂度" class="headerlink" title="diff算法的时间复杂度"></a>diff算法的时间复杂度</h3><p> 两个树的完全的 diff 算法是一个时间复杂度为 O(n3) , Vue 进行了优化·O(n3) 复杂度的问题转换成 O(n) 复杂度的问题(只比较同级不考虑跨级问题)  在前端当中， 你很少会跨越层级地移动Dom元素。 所 以 Virtual Dom只会对同一个层级的元素进行对比。</p><h3 id="diff算法原理"><a href="#diff算法原理" class="headerlink" title="diff算法原理"></a>diff算法原理</h3><blockquote><p>简单的来说,diff算法是为了比较新的DOM树和旧的DOM树,以此来算出,哪些DOM可以复用,新增哪些DOM,移除哪些DOM,优化DOM树的渲染</p></blockquote><p>自己总结的原理大概是这样的: </p><ol><li>目的: 比较 <code>新的树</code> 和 <code>旧的树</code></li></ol><blockquote><p>在新的树和旧的树头部插入指针, 尾部也插入指针, 进行双指针循环遍历比较</p></blockquote><ol start="2"><li>如何进行比较: </li></ol><p>假设,旧的DOM树和新的DOM树开头相同,指针从开头比较(针对元素新增在末尾,前面相同的DOM元素可以复用)<br>如果开头不一样的话,指针从尾部开始比较(针对元素新增在开头,后面相同的DOM元素可以复用)<br>如果尾部也不一样,会比较新的头和旧的尾(针对末尾的DOM元素移动到了开头)<br>要是也不一样,比较新的尾和旧的头(针对开始的DOM元素移动到了末尾)<br>都不一样,从开头开始遍历(从头开始遍历父级节点和子级节点)</p><p>详细的图片在底下,可以比较图片进行理解</p><ol start="3"><li>如何循环遍历: </li></ol><p>首先同级比较, 在比较子节点</p><blockquote><p>同级比较: 也就是父节点和父节点比较,子节点和子节点比较</p></blockquote><p>如果父级节点相同,再比较子节点</p><p>比较的时候,是这样判断的: </p><ul><li>新的有,旧的也有,使用旧的</li><li>新的有,旧的没有,插入新的</li><li>新的没有,旧的有,删除旧的</li><li>当比较父级的时候,判断子节点是否存在也是这样判断的,都存在的情况下,进行深入递归遍历</li></ul><p><img src="https://csblogimage.oss-cn-hangzhou.aliyuncs.com/138-diff.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,size_16,text_Qnku6ZmI5YWI55Sf55qE5bCP5YmN56uv,color_FFFFFF,shadow_50,t_100,g_se,x_10,y_10" alt="示例图片"></p><p>看看图片中的最后一条</p><p>假设 旧的数据为 ABCD , 新的数据为 CDME</p><p>由于都不满足比较的四点基本判断,所以直接从开头开始遍历</p><ol><li>首先判断新的DOM树的第一个’C’,发现旧的有,移动到第一个</li><li>然后判断新的DOM树的第二个’D’,发现旧的有,移动到第二个</li><li>再判断’M’和’E’,发现都没有,直接插入</li><li>最后将AB直接删除</li></ol><blockquote><p>这就是为什么v-for要用Key,不加的话会使用上面的diff算法进行暴力比对</p></blockquote><p>知道了大致的流程,我们再去源码中看看具体的代码是怎么实现的(源码的位置在core/vdom/patch.js中)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">const oldCh &#x3D; oldVnode.children &#x2F;&#x2F; 老的儿子 </span><br><span class="line">const ch &#x3D; vnode.children &#x2F;&#x2F; 新的儿子 </span><br><span class="line">if (isUndef(vnode.text)) &#123;</span><br><span class="line">  if (isDef(oldCh) &amp;&amp; isDef(ch)) &#123; &#x2F;&#x2F; 比较孩子        </span><br><span class="line">    if (oldCh !&#x3D;&#x3D; ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)</span><br><span class="line">  &#125; else if (isDef(ch)) &#123; &#x2F;&#x2F; 新的儿子有 老的没有        </span><br><span class="line">    if (isDef(oldVnode.text)) &#123;</span><br><span class="line">      nodeOps.setTextContent(elm, &#39;&#39;) &#x2F;&#x2F; 将老的清空   </span><br><span class="line">      addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue)</span><br><span class="line">    &#125;   </span><br><span class="line">  &#125; else if (isDef(oldCh)) &#123; &#x2F;&#x2F; 如果老的有新的没有 就删除        </span><br><span class="line">    removeVnodes(oldCh, 0, oldCh.length - 1)</span><br><span class="line">  &#125; else if (isDef(oldVnode.text)) &#123; &#x2F;&#x2F; 老的有文本 新的没文本</span><br><span class="line">    nodeOps.setTextContent(elm, &#39;&#39;) &#x2F;&#x2F; 将老的清空    </span><br><span class="line">  &#125;</span><br><span class="line">&#125; else if (oldVnode.text !&#x3D;&#x3D; vnode.text) &#123; &#x2F;&#x2F; 文本不相同替换   </span><br><span class="line">  nodeOps.setTextContent(elm, vnode.text)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) &#123;</span><br><span class="line">  let oldStartIdx &#x3D; 0</span><br><span class="line">  let newStartIdx &#x3D; 0</span><br><span class="line">  let oldEndIdx &#x3D; oldCh.length - 1</span><br><span class="line">  let oldStartVnode &#x3D; oldCh[0]</span><br><span class="line">  let oldEndVnode &#x3D; oldCh[oldEndIdx]</span><br><span class="line">  let newEndIdx &#x3D; newCh.length - 1</span><br><span class="line">  let newStartVnode &#x3D; newCh[0]</span><br><span class="line">  let newEndVnode &#x3D; newCh[newEndIdx]</span><br><span class="line">  let oldKeyToIdx, idxInOld, vnodeToMove, refElm</span><br><span class="line">  &#x2F;&#x2F; removeOnly is a special flag used only by &lt;transition-group&gt;    </span><br><span class="line">  &#x2F;&#x2F; to ensure removed elements stay in correct relative positions    </span><br><span class="line">  &#x2F;&#x2F; during leaving transitions    </span><br><span class="line">  const canMove &#x3D; !removeOnly</span><br><span class="line">  if (process.env.NODE_ENV !&#x3D;&#x3D; &#39;production&#39;) &#123;</span><br><span class="line">    checkDuplicateKeys(newCh)</span><br><span class="line">  &#125;</span><br><span class="line">  while (oldStartIdx &lt;&#x3D; oldEndIdx &amp;&amp; newStartIdx &lt;&#x3D; newEndIdx) &#123;</span><br><span class="line">    if (isUndef(oldStartVnode)) &#123;</span><br><span class="line">      oldStartVnode &#x3D; oldCh[++oldStartIdx] &#x2F;&#x2F; Vnode has been moved left     </span><br><span class="line">    &#125; else if (isUndef(oldEndVnode)) &#123;</span><br><span class="line">      oldEndVnode &#x3D; oldCh[--oldEndIdx]</span><br><span class="line">    &#125; else if (sameVnode(oldStartVnode, newStartVnode)) &#123;</span><br><span class="line">      patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx) oldStartVnode &#x3D; oldCh[++</span><br><span class="line">        oldStartIdx] newStartVnode &#x3D; newCh[++newStartIdx]</span><br><span class="line">    &#125; else if (sameVnode(oldEndVnode, newEndVnode)) &#123;</span><br><span class="line">      patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx) oldEndVnode &#x3D; oldCh[--oldEndIdx] newEndVnode &#x3D;</span><br><span class="line">        newCh[--newEndIdx]</span><br><span class="line">    &#125; else if (sameVnode(oldStartVnode, newEndVnode)) &#123; &#x2F;&#x2F; Vnode moved right        </span><br><span class="line">      patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx) canMove &amp;&amp; nodeOps.insertBefore(</span><br><span class="line">          parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm)) oldStartVnode &#x3D; oldCh[++oldStartIdx] newEndVnode &#x3D;</span><br><span class="line">        newCh[--newEndIdx]</span><br><span class="line">    &#125; else if (sameVnode(oldEndVnode, newStartVnode)) &#123; &#x2F;&#x2F; Vnode moved left        </span><br><span class="line">      patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx) canMove &amp;&amp; nodeOps.insertBefore(</span><br><span class="line">        parentElm, oldEndVnode.elm, oldStartVnode.elm) oldEndVnode &#x3D; oldCh[--oldEndIdx] newStartVnode &#x3D; newCh[++</span><br><span class="line">        newStartIdx]</span><br><span class="line">    &#125; else &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      if (isUndef(oldKeyToIdx)) oldKeyToIdx &#x3D; createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx) idxInOld &#x3D; isDef(</span><br><span class="line">        newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx,</span><br><span class="line">        oldEndIdx) if (isUndef(idxInOld)) &#123; &#x2F;&#x2F; New element          </span><br><span class="line">        createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        vnodeToMove &#x3D; oldCh[idxInOld]</span><br><span class="line">        if (sameVnode(vnodeToMove, newStartVnode)) &#123;</span><br><span class="line">          patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx) oldCh[idxInOld] &#x3D; undefined canMove &amp;&amp;</span><br><span class="line">            nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)</span><br><span class="line">        &#125; else &#123; &#x2F;&#x2F; same key but different element. treat as new element           </span><br><span class="line">          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; newStartVnode &#x3D; newCh[++newStartIdx]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if (oldStartIdx &gt; oldEndIdx) &#123;</span><br><span class="line">    refElm &#x3D; isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm addVnodes(parentElm, refElm, newCh,</span><br><span class="line">      newStartIdx, newEndIdx, insertedVnodeQueue)</span><br><span class="line">  &#125;</span><br><span class="line">  a</span><br><span class="line">  else if (newStartIdx &gt; newEndIdx) &#123;</span><br><span class="line">    removeVnodes(oldCh, oldStartIdx, oldEndIdx)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是我对diff算法的一些理解,如果文章由于我学识浅薄,导致您发现有严重谬误的地方,请一定在评论中指出,我会在第一时间修正我的博文,以避免误人子弟。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr style=&#39;filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)&#39; color=&#39;#FF0000&#39; size=&#39;1&#39; /&gt;

&lt;blockquote&gt;
&lt;p&gt;今天就是除夕了,也只有放假才有时间写一写博客,把欠下的博客都补上&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="https://www.chensheng.group/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://www.chensheng.group/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue源码学习-模板编译原理</title>
    <link href="https://www.chensheng.group/2020/11/08/137-vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    <id>https://www.chensheng.group/2020/11/08/137-vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0-%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</id>
    <published>2020-11-08T07:26:00.000Z</published>
    <updated>2020-11-08T13:29:23.629Z</updated>
    
    <content type="html"><![CDATA[<hr style='filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)' color='#FF0000' size='1' /><blockquote><p>由于之前发生了一些事情,并且公司的项目也很赶,碰巧孩子出生了,所以忙的不可开交,,很久没有更新博客了,今天有时间,把欠下的博客都补上</p></blockquote><a id="more"></a><p>我们在学习Vue的时候,一直都说虚拟DOM,虚拟DOM,那么,什么是虚拟DOM,虚拟DOM又是怎么生成的呢?</p><p>虚拟DOM的生成大致上是分为这么几步的:</p><ol><li><p>template 通过正则转化为ast树</p></li><li><p>ast树通过codegen方法,转化为render函数</p></li><li><p>render函数,内部调用_c方法,( _c方法就是创建el) 转化为虚拟dom</p></li></ol><blockquote><p>用一个对象来描述一个DOM元素,这就是虚拟DOM</p></blockquote><p>知道了大致的流程,我们再去源码中看看具体的代码是怎么实现的(源码的位置在scr/compiler/index.js中)</p><p>首先,创建了一个编译器(createCompilerCreator),传入了一个 bsaeCompile函数,这个函数描述了模板是怎么转化成render函数的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function baseCompile(template: string, options: CompilerOptions) &#123;</span><br><span class="line">  const ast &#x3D; parse(template.trim(), options) &#x2F;&#x2F; 1.将模板转化成ast语法树  </span><br><span class="line">  if (options.optimize !&#x3D;&#x3D; false) &#123; &#x2F;&#x2F; 2.优化树    </span><br><span class="line">    optimize(ast, options)</span><br><span class="line">  &#125;</span><br><span class="line">  const code &#x3D; generate(ast, options) &#x2F;&#x2F; 3.生成树  </span><br><span class="line">  return &#123;</span><br><span class="line">    ast,</span><br><span class="line">    render: code.render,</span><br><span class="line">    staticRenderFns: code.staticRenderFns</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Vue的源码看起来有点乱,上百度找了大神整理好的,看看bsaeCompile展开后,还做了哪些操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">const ncname &#x3D; &#96;[a-zA-Z_][\\-\\.0-9_a-zA-Z]*&#96;;</span><br><span class="line">const qnameCapture &#x3D; &#96;((?:$&#123;ncname&#125;\\:)?$&#123;ncname&#125;)&#96;;</span><br><span class="line">const startTagOpen &#x3D; new RegExp(&#96;^&lt;$&#123;qnameCapture&#125;&#96;); &#x2F;&#x2F; 标签开头的正则 捕获的内容是 标签名 </span><br><span class="line">const endTag &#x3D; new RegExp(&#96;^&lt;\\&#x2F;$&#123;qnameCapture&#125;[^&gt;]*&gt;&#96;); &#x2F;&#x2F; 匹配标签结尾的  &lt;&#x2F;div&gt; </span><br><span class="line">const attribute &#x3D; &#x2F;^\s*([^\s&quot;&#39;&lt;&gt;\&#x2F;&#x3D;]+)(?:\s*(&#x3D;)\s*(?:&quot;([^&quot;]*)&quot;+|&#39;([^&#39;]*)&#39;+| ([^\s&quot;&#39;&#x3D;&lt;&gt;&#96;]+)))?&#x2F;; &#x2F;&#x2F; 匹配属性的 </span><br><span class="line">const startTagClose &#x3D; &#x2F;^\s*(\&#x2F;?)&gt;&#x2F;; &#x2F;&#x2F; 匹配标签结束的  &gt; </span><br><span class="line">let root;</span><br><span class="line">let currentParent;</span><br><span class="line">let stack &#x3D; []</span><br><span class="line"></span><br><span class="line">function createASTElement(tagName, attrs) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    tag: tagName,</span><br><span class="line">    type: 1,</span><br><span class="line">    children: [],</span><br><span class="line">    attrs,</span><br><span class="line">    parent: null</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function start(tagName, attrs) &#123;</span><br><span class="line">  let element &#x3D; createASTElement(tagName, attrs);</span><br><span class="line">  if (!root) &#123;</span><br><span class="line">    root &#x3D; element;</span><br><span class="line">  &#125;</span><br><span class="line">  currentParent &#x3D; element;</span><br><span class="line">  stack.push(element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function chars(text) &#123;</span><br><span class="line">  currentParent.children.push(&#123;</span><br><span class="line">    type: 3,</span><br><span class="line">    text</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function end(tagName) &#123;</span><br><span class="line">  const element &#x3D; stack[stack.length - 1];</span><br><span class="line">  stack.length--;</span><br><span class="line">  currentParent &#x3D; stack[stack.length - 1];</span><br><span class="line">  if (currentParent) &#123;</span><br><span class="line">    element.parent &#x3D; currentParent;</span><br><span class="line">    currentParent.children.push(element)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function parseHTML(html) &#123;</span><br><span class="line">  while (html) &#123;</span><br><span class="line">    let textEnd &#x3D; html.indexOf(&#39;&lt;&#39;);</span><br><span class="line">    if (textEnd &#x3D;&#x3D; 0) &#123;</span><br><span class="line">      const startTagMatch &#x3D; parseStartTag();</span><br><span class="line">      if (startTagMatch) &#123;</span><br><span class="line">        start(startTagMatch.tagName, startTagMatch.attrs);</span><br><span class="line">        continue;</span><br><span class="line">      &#125;</span><br><span class="line">      const endTagMatch &#x3D; html.match(endTag);</span><br><span class="line">      if (endTagMatch) &#123;</span><br><span class="line">        advance(endTagMatch[0].length);</span><br><span class="line">        end(endTagMatch[1])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    let text;</span><br><span class="line">    if (textEnd &gt;&#x3D; 0) &#123;</span><br><span class="line">      text &#x3D; html.substring(0, textEnd)</span><br><span class="line">    &#125;</span><br><span class="line">    if (text) &#123;</span><br><span class="line">      advance(text.length);</span><br><span class="line">      chars(text);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function advance(n) &#123;</span><br><span class="line">    html &#x3D; html.substring(n);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function parseStartTag() &#123;</span><br><span class="line">    const start &#x3D; html.match(startTagOpen);</span><br><span class="line">    if (start) &#123;</span><br><span class="line">      const match &#x3D; &#123;</span><br><span class="line">        tagName: start[1],</span><br><span class="line">        attrs: []</span><br><span class="line">      &#125;</span><br><span class="line">      advance(start[0].length);</span><br><span class="line">      let attr, end</span><br><span class="line">      while (!(end &#x3D; html.match(startTagClose)) &amp;&amp; (attr &#x3D; html.match(attribute))) &#123;</span><br><span class="line">        advance(attr[0].length);</span><br><span class="line">        match.attrs.push(&#123;</span><br><span class="line">          name: attr[1],</span><br><span class="line">          value: attr[3]</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      if (end) &#123;</span><br><span class="line">        advance(end[0].length);</span><br><span class="line">        return match</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; &#x2F;&#x2F; 生成语法树 </span><br><span class="line">parseHTML(&#96;&lt;div id&#x3D;&quot;container&quot;&gt;&lt;p&gt;hello&lt;span&gt;zf&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&#96;);</span><br><span class="line"></span><br><span class="line">function gen(node) &#123;</span><br><span class="line">  if (node.type &#x3D;&#x3D; 1) &#123;</span><br><span class="line">    return generate(node);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return &#96;_v($&#123;JSON.stringify(node.text)&#125;)&#96;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function genChildren(el) &#123;</span><br><span class="line">  const children &#x3D; el.children;</span><br><span class="line">  if (el.children) &#123;</span><br><span class="line">    return &#96;[$&#123;children.map(c&#x3D;&gt;gen(c)).join(&#39;,&#39;)&#125;]&#96;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function genProps(attrs) &#123;</span><br><span class="line">  let str &#x3D; &#39;&#39;;</span><br><span class="line">  for (let i &#x3D; 0; i &lt; attrs.length; i++) &#123;</span><br><span class="line">    let attr &#x3D; attrs[i];</span><br><span class="line">    str +&#x3D; &#96;$&#123;attr.name&#125;:$&#123;attr.value&#125;,&#96;;</span><br><span class="line">  &#125;</span><br><span class="line">  return &#96;&#123;attrs:&#123;$&#123;str.slice(0,-1)&#125;&#125;&#125;&#96;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function generate(el) &#123;</span><br><span class="line">  let children &#x3D; genChildren(el);</span><br><span class="line">  let code &#x3D; &#96;_c(&#39;$&#123;el.tag&#125;&#39;$&#123;el.attrs.length?&#96;,$&#123;genProps(el.attrs)&#125;&#96;:&#39;&#39;&#125;$&#123;children? &#96;,$&#123;children&#125;&#96;:&#39;&#39;&#125;)&#96;;</span><br><span class="line">  return code;</span><br><span class="line">&#125; &#x2F;&#x2F; 根据语法树生成新的代码 </span><br><span class="line">let code &#x3D; generate(root);</span><br><span class="line">let render &#x3D; &#96;with(this)&#123;return $&#123;code&#125;&#125;&#96;;</span><br><span class="line">&#x2F;&#x2F; 包装成函数 </span><br><span class="line">let renderFn &#x3D; new Function(render);</span><br><span class="line">console.log(renderFn.toString());</span><br></pre></td></tr></table></figure><p>假设我们的template里面写了这个 <code>&lt;div id=&quot;container&quot;&gt;&lt;p&gt;hello&lt;span&gt;zf&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;</code></p><p>通过parseHTML函数,循环遍历里面的每一个字符串,判断是否为’&lt;’</p><blockquote><p>每次循环判断完之后,都会删除对应的长度</p></blockquote><p>匹配到了<code>&lt;div</code>后,生成一个对象,将’div’放入了tagName中,可能div会有属性,也生成一个attrs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 就是上面代码中的这一段 --&gt;</span><br><span class="line">const match &#x3D; &#123;</span><br><span class="line">  tagName: start[1],</span><br><span class="line">  attrs: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后会继续循环匹配,看看是否是 ‘&gt;’ 关闭标签,如果不是的话,继续循环</p><p>循环到了是一个 <code>id=&quot;container&quot;</code>,根据正则来判断是否是属性,放入了<code>attrs</code>中</p><p>再次循环匹配到是一个 ‘&gt;’ 关闭标签,返回这个对象</p><p>这时候字符串已经剩下这样的了 <code>&lt;p&gt;hello&lt;span&gt;zf&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;</code>, 前面的<code>&lt;div id=&quot;container&quot;&gt;</code> 都已经判断处理完了</p><p>再一次判断到是’&lt;’后,重复上面的操作</p><p>不一样的是,p标签中是一个’hello’字符串,通过正则判断后,是将这个hello传入chars中,代码中也有,就不写出来了</p><p>通过这样一步一步的循环遍历判断,最终会生成一个完整的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  tag: &quot;div&quot;</span><br><span class="line">  type: 1,</span><br><span class="line">  children: [&#123;</span><br><span class="line">    tag: &quot;p&quot;</span><br><span class="line">    type: 1,</span><br><span class="line">    children: [&#123;</span><br><span class="line">      type: 3</span><br><span class="line">      text: &quot;hello&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      tag: &quot;span&quot;</span><br><span class="line">      type: 1,</span><br><span class="line">      children: [&#123;</span><br><span class="line">        type: 3</span><br><span class="line">        text: &quot;zf&quot;</span><br><span class="line">      &#125;],</span><br><span class="line">      attrs: [],</span><br><span class="line">      parent: &#39;&#39; &#x2F;&#x2F; 父级</span><br><span class="line">    &#125;],</span><br><span class="line">    attrs: [],</span><br><span class="line">    parent: &#39;&#39; &#x2F;&#x2F; 父级</span><br><span class="line">  &#125;],</span><br><span class="line">  attrs: [&#123;</span><br><span class="line">    name: &quot;id&quot;</span><br><span class="line">    value: &quot;container&quot;</span><br><span class="line">  &#125;],</span><br><span class="line">  parent: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以用一个对象来描述一个DOM元素</p><p>以上就是我对vue模板编译的一些理解,如果文章由于我学识浅薄,导致您发现有严重谬误的地方,请一定在评论中指出,我会在第一时间修正我的博文,以避免误人子弟。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr style=&#39;filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)&#39; color=&#39;#FF0000&#39; size=&#39;1&#39; /&gt;

&lt;blockquote&gt;
&lt;p&gt;由于之前发生了一些事情,并且公司的项目也很赶,碰巧孩子出生了,所以忙的不可开交,,很久没有更新博客了,今天有时间,把欠下的博客都补上&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="https://www.chensheng.group/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://www.chensheng.group/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用Valine评论</title>
    <link href="https://www.chensheng.group/2020/07/29/136-hexo%E4%BD%BF%E7%94%A8Valine%E8%AF%84%E8%AE%BA/"/>
    <id>https://www.chensheng.group/2020/07/29/136-hexo%E4%BD%BF%E7%94%A8Valine%E8%AF%84%E8%AE%BA/</id>
    <published>2020-07-29T13:19:00.000Z</published>
    <updated>2021-09-03T06:54:41.233Z</updated>
    
    <content type="html"><![CDATA[<hr style='filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)' color='#FF0000' size='1' /><blockquote><p>关于这个评论系统,前前后后换了三四个,今天又换了一个,哎,评论又要被清空了</p></blockquote><a id="more"></a><p>最早使用的是来必力的,还不错,就是有点卡顿,还需要登录,后来不知道怎么回事,用不来了,就换了一个 </p><p>之后就换成了畅言,也是一个不错的评论系统,但是会给博客塞一些广告,一气之下,又换了一个</p><p>换成了git官方的一个插件,gitalk,可以在git仓库中看到评论,但是也是需要git登录之后才可以评论</p><p>于是换成了现在的Valine</p><p>Valine用的是LeanCloud作为数据,所以我们需要先打开LeanCloud去注册LeanCloud并创建一个开发版应用（免费）</p><p><a href="https://leancloud.cn/dashboard/applist.html#/apps" target="_blank" rel="noopener">戳我戳我,一键跳转</a></p><p>之后在LeanCloud -&gt; 存储 -&gt; 创建Class -&gt; 无限制的Class, class名称为：Comment</p><p>在LeanCloud-设置-把除数据存储其他选项都关闭。</p><p>然后再底下的安全域名中添加域名</p><p>之后在Next模板下的_config.yml搜索Valine进行填写appid和appkey</p><p>OK了,大功告成,就是这么简单,图我就不放出来了,相信大家都能找得到</p><p>感叹代码的进步,换评论系统一次比一次简单了,当初换个畅言评论,折腾了许久,又要备案,又要审核</p><p>哪里不懂的就在评论中提出来,我会不定时的看一看</p>]]></content>
    
    <summary type="html">
    
      &lt;hr style=&#39;filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)&#39; color=&#39;#FF0000&#39; size=&#39;1&#39; /&gt;

&lt;blockquote&gt;
&lt;p&gt;关于这个评论系统,前前后后换了三四个,今天又换了一个,哎,评论又要被清空了&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://www.chensheng.group/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.chensheng.group/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo添加看板娘</title>
    <link href="https://www.chensheng.group/2020/07/27/135-hexo%E7%9C%8B%E6%9D%BF%E5%A8%98/"/>
    <id>https://www.chensheng.group/2020/07/27/135-hexo%E7%9C%8B%E6%9D%BF%E5%A8%98/</id>
    <published>2020-07-27T13:10:00.000Z</published>
    <updated>2020-07-27T13:20:37.889Z</updated>
    
    <content type="html"><![CDATA[<hr style='filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)' color='#FF0000' size='1' /><blockquote><p>何如给我们的博客添加一个会说话的看板娘呢</p></blockquote><a id="more"></a><h3 id="简易版"><a href="#简易版" class="headerlink" title="简易版"></a>简易版</h3><p>先安装插件</p><p>npm install –save hexo-helper-live2d</p><p><a href="https://github.com/summerscar/live2dDemo" target="_blank" rel="noopener">看板娘模型选择</a></p><p>选择一个看板娘的模型,继续下载 <code>npm install live2d-widget-model-z16 --save</code></p><p>然后在根目录下的_config.yml下配置live2d</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw&#x2F;</span><br><span class="line">  pluginJsPath: lib&#x2F;</span><br><span class="line">  pluginModelPath: assets&#x2F;</span><br><span class="line">  tagMode: false</span><br><span class="line">  debug: false</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-z16</span><br><span class="line">    # live2d-widget-model-wanko</span><br><span class="line">    # live2d-widget-model-z16</span><br><span class="line">  display:</span><br><span class="line">    position: left</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br></pre></td></tr></table></figure><p>重新运行一下就好啦</p><h3 id="豪华版"><a href="#豪华版" class="headerlink" title="豪华版"></a>豪华版</h3><p>把之前的live2d卸载掉 <code>npm uninstall hexo-helper-live2d</code></p><p>下载大神的配置<a href="https://github.com/stevenjoezhang/live2d-widget" target="_blank" rel="noopener">戳我戳我</a></p><p>下载好之后,在主目录\themes\next\source目录下新建目录live2d-widget</p><p>然后修改autoload.js文件，将路径改为绝对路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 注意：live2d_path 参数应使用绝对路径</span><br><span class="line">&#x2F;&#x2F;const live2d_path &#x3D; &quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;stevenjoezhang&#x2F;live2d-widget@latest&#x2F;&quot;;</span><br><span class="line">const live2d_path &#x3D; &quot;&#x2F;live2d-widget&#x2F;&quot;;</span><br></pre></td></tr></table></figure><p>之后就是引入链接了</p><p>有一些主题,路径在<code>/themes/主题名字/layout/_partial/head.ejs</code>目录下<br>我的next主题,是在<code>/themes/next/layout/_layout.swing</code>目录下</p><p>添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;jquery&#x2F;dist&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;font-awesome&#x2F;css&#x2F;font-awesome.min.css&quot;&#x2F;&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;&#x2F;live2d-widget&#x2F;autoload.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>想修改看板娘大小、位置、格式、文本内容等，可查看并修改 waifu-tips.js 、 waifu-tips.json 、waifu.css文件。</p><p>这样就有一个会说话,会换装的看板娘了,还可以召唤小飞机按空格键发射子弹</p>]]></content>
    
    <summary type="html">
    
      &lt;hr style=&#39;filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)&#39; color=&#39;#FF0000&#39; size=&#39;1&#39; /&gt;

&lt;blockquote&gt;
&lt;p&gt;何如给我们的博客添加一个会说话的看板娘呢&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://www.chensheng.group/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.chensheng.group/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>富文本编辑器</title>
    <link href="https://www.chensheng.group/2020/07/17/134-%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>https://www.chensheng.group/2020/07/17/134-%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/</id>
    <published>2020-07-17T13:35:00.000Z</published>
    <updated>2020-07-29T12:09:42.596Z</updated>
    
    <content type="html"><![CDATA[<hr style='filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)' color='#FF0000' size='1' /><blockquote><p>推荐一个好用的富文本编辑器,之前也有用过其他版本的,但是都太简易了</p></blockquote><a id="more"></a><p>安装 vue-editor-wrap</p><p>npm install vue-editor-wrap</p><p>下载大神已经处理后的UEditor,下载 地址链接: <a href="https://pan.baidu.com/s/1ds-HyhXD5EFYCcp7uen2XA" target="_blank" rel="noopener">https://pan.baidu.com/s/1ds-HyhXD5EFYCcp7uen2XA</a> 提取码: s7ry</p><p>解压, 重命名文件夹为UEditor, 放入public文件夹下(如果是旧项目对应static文件夹)</p><p>在 main.js中引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import VueUeditorWrap from &#39;vue-ueditor-wrap&#39;</span><br><span class="line">Vue.component(&#39;vue-ueditor-wrap&#39;, VueUeditorWrap)</span><br></pre></td></tr></table></figure><p>然后再.vue文件中就可以使用啦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;ueditor-page&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;ueditor-box&quot;&gt;</span><br><span class="line">      &lt;vue-ueditor-wrap v-model&#x3D;&quot;msg&quot; :config&#x3D;&quot;myConfig&quot; @before-init&#x3D;&quot;addCustomButtom&quot;&gt;&lt;&#x2F;vue-ueditor-wrap&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;Preview&quot; v-html&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: &#39;&#39;,</span><br><span class="line">        myConfig: &#123;</span><br><span class="line">          &#x2F;&#x2F; 编辑器不自动被内容撑高</span><br><span class="line">          autoHeightEnabled: false,</span><br><span class="line">          &#x2F;&#x2F; 底部元素路径</span><br><span class="line">          elementPathEnabled : false,</span><br><span class="line">          &#x2F;&#x2F;是否开启字数统计</span><br><span class="line">          wordCount: true,</span><br><span class="line">          &#x2F;&#x2F; 初始容器高度</span><br><span class="line">          initialFrameHeight: &#39;100%&#39;,</span><br><span class="line">          &#x2F;&#x2F; 初始容器宽度</span><br><span class="line">          initialFrameWidth: &#39;100%&#39;,</span><br><span class="line">          &#x2F;&#x2F; 上传文件接口</span><br><span class="line">          serverUrl: &#39;http:&#x2F;&#x2F;10.100.2.127:8080&#x2F;webapi.php&#39;,</span><br><span class="line">          toolbars: [</span><br><span class="line">            [</span><br><span class="line">              &#39;anchor&#39;, &#x2F;&#x2F;锚点</span><br><span class="line">              &#39;undo&#39;, &#x2F;&#x2F;撤销</span><br><span class="line">              &#39;redo&#39;, &#x2F;&#x2F;重做</span><br><span class="line">              &#39;bold&#39;, &#x2F;&#x2F;加粗</span><br><span class="line">              &#39;indent&#39;, &#x2F;&#x2F;首行缩进</span><br><span class="line">              &#x2F;&#x2F; &#39;snapscreen&#39;, &#x2F;&#x2F;截图</span><br><span class="line">              &#39;italic&#39;, &#x2F;&#x2F;斜体</span><br><span class="line">              &#39;underline&#39;, &#x2F;&#x2F;下划线</span><br><span class="line">              &#39;strikethrough&#39;, &#x2F;&#x2F;删除线</span><br><span class="line">              &#39;subscript&#39;, &#x2F;&#x2F;下标</span><br><span class="line">              &#39;fontborder&#39;, &#x2F;&#x2F;字符边框</span><br><span class="line">              &#39;superscript&#39;, &#x2F;&#x2F;上标</span><br><span class="line">              &#39;formatmatch&#39;, &#x2F;&#x2F;格式刷</span><br><span class="line">              &#x2F;&#x2F; &#39;source&#39;, &#x2F;&#x2F;源代码</span><br><span class="line">              &#39;blockquote&#39;, &#x2F;&#x2F;引用</span><br><span class="line">              &#39;pasteplain&#39;, &#x2F;&#x2F;纯文本粘贴模式</span><br><span class="line">              &#39;selectall&#39;, &#x2F;&#x2F;全选</span><br><span class="line">              &#39;print&#39;, &#x2F;&#x2F;打印</span><br><span class="line">              &#x2F;&#x2F; &#39;preview&#39;, &#x2F;&#x2F;预览</span><br><span class="line">              &#39;horizontal&#39;, &#x2F;&#x2F;分隔线</span><br><span class="line">              &#39;removeformat&#39;, &#x2F;&#x2F;清除格式</span><br><span class="line">              &#39;time&#39;, &#x2F;&#x2F;时间</span><br><span class="line">              &#39;date&#39;, &#x2F;&#x2F;日期</span><br><span class="line">              &#39;unlink&#39;, &#x2F;&#x2F;取消链接</span><br><span class="line">              &#39;insertrow&#39;, &#x2F;&#x2F;前插入行</span><br><span class="line">              &#39;insertcol&#39;, &#x2F;&#x2F;前插入列</span><br><span class="line">              &#39;mergeright&#39;, &#x2F;&#x2F;右合并单元格</span><br><span class="line">              &#39;mergedown&#39;, &#x2F;&#x2F;下合并单元格</span><br><span class="line">              &#39;deleterow&#39;, &#x2F;&#x2F;删除行</span><br><span class="line">              &#39;deletecol&#39;, &#x2F;&#x2F;删除列</span><br><span class="line">              &#39;splittorows&#39;, &#x2F;&#x2F;拆分成行</span><br><span class="line">              &#39;splittocols&#39;, &#x2F;&#x2F;拆分成列</span><br><span class="line">              &#39;splittocells&#39;, &#x2F;&#x2F;完全拆分单元格</span><br><span class="line">              &#39;deletecaption&#39;, &#x2F;&#x2F;删除表格标题</span><br><span class="line">              &#39;inserttitle&#39;, &#x2F;&#x2F;插入标题</span><br><span class="line">              &#39;mergecells&#39;, &#x2F;&#x2F;合并多个单元格</span><br><span class="line">              &#39;deletetable&#39;, &#x2F;&#x2F;删除表格</span><br><span class="line">              &#39;cleardoc&#39;, &#x2F;&#x2F;清空文档</span><br><span class="line">              &#39;insertparagraphbeforetable&#39;, &#x2F;&#x2F;&quot;表格前插入行&quot;</span><br><span class="line">              &#x2F;&#x2F; &#39;insertcode&#39;, &#x2F;&#x2F;代码语言</span><br><span class="line">              &#39;fontfamily&#39;, &#x2F;&#x2F;字体</span><br><span class="line">              &#39;fontsize&#39;, &#x2F;&#x2F;字号</span><br><span class="line">              &#39;paragraph&#39;, &#x2F;&#x2F;段落格式</span><br><span class="line">              &#x2F;&#x2F; &#39;simpleupload&#39;, &#x2F;&#x2F;单图上传</span><br><span class="line">              &#x2F;&#x2F; &#39;insertimage&#39;, &#x2F;&#x2F;多图上传</span><br><span class="line">              &#x2F;&#x2F; &#39;edittable&#39;, &#x2F;&#x2F;表格属性</span><br><span class="line">              &#x2F;&#x2F; &#39;edittd&#39;, &#x2F;&#x2F;单元格属性</span><br><span class="line">              &#39;link&#39;, &#x2F;&#x2F;超链接</span><br><span class="line">              &#39;emotion&#39;, &#x2F;&#x2F;表情</span><br><span class="line">              &#39;spechars&#39;, &#x2F;&#x2F;特殊字符</span><br><span class="line">              &#39;searchreplace&#39;, &#x2F;&#x2F;查询替换</span><br><span class="line">              &#39;map&#39;, &#x2F;&#x2F;Baidu地图</span><br><span class="line">              &#x2F;&#x2F; &#39;gmap&#39;, &#x2F;&#x2F;Google地图</span><br><span class="line">              &#39;insertvideo&#39;, &#x2F;&#x2F;视频</span><br><span class="line">              &#39;help&#39;, &#x2F;&#x2F;帮助</span><br><span class="line">              &#39;justifyleft&#39;, &#x2F;&#x2F;居左对齐</span><br><span class="line">              &#39;justifyright&#39;, &#x2F;&#x2F;居右对齐</span><br><span class="line">              &#39;justifycenter&#39;, &#x2F;&#x2F;居中对齐</span><br><span class="line">              &#39;justifyjustify&#39;, &#x2F;&#x2F;两端对齐</span><br><span class="line">              &#39;forecolor&#39;, &#x2F;&#x2F;字体颜色</span><br><span class="line">              &#39;backcolor&#39;, &#x2F;&#x2F;背景色</span><br><span class="line">              &#39;insertorderedlist&#39;, &#x2F;&#x2F;有序列表</span><br><span class="line">              &#39;insertunorderedlist&#39;, &#x2F;&#x2F;无序列表</span><br><span class="line">              &#39;fullscreen&#39;, &#x2F;&#x2F;全屏</span><br><span class="line">              &#39;directionalityltr&#39;, &#x2F;&#x2F;从左向右输入</span><br><span class="line">              &#39;directionalityrtl&#39;, &#x2F;&#x2F;从右向左输入</span><br><span class="line">              &#39;rowspacingtop&#39;, &#x2F;&#x2F;段前距</span><br><span class="line">              &#39;rowspacingbottom&#39;, &#x2F;&#x2F;段后距</span><br><span class="line">              &#x2F;&#x2F; &#39;pagebreak&#39;, &#x2F;&#x2F;分页</span><br><span class="line">              &#39;insertframe&#39;, &#x2F;&#x2F;插入Iframe</span><br><span class="line">              &#39;imagenone&#39;, &#x2F;&#x2F;默认</span><br><span class="line">              &#39;imageleft&#39;, &#x2F;&#x2F;左浮动</span><br><span class="line">              &#39;imageright&#39;, &#x2F;&#x2F;右浮动</span><br><span class="line">              &#x2F;&#x2F; &#39;attachment&#39;, &#x2F;&#x2F;附件</span><br><span class="line">              &#39;imagecenter&#39;, &#x2F;&#x2F;居中</span><br><span class="line">              &#39;wordimage&#39;, &#x2F;&#x2F;图片转存</span><br><span class="line">              &#39;lineheight&#39;, &#x2F;&#x2F;行间距</span><br><span class="line">              &#39;edittip &#39;, &#x2F;&#x2F;编辑提示</span><br><span class="line">              &#x2F;&#x2F; &#39;customstyle&#39;, &#x2F;&#x2F;自定义标题</span><br><span class="line">              &#39;autotypeset&#39;, &#x2F;&#x2F;自动排版</span><br><span class="line">              &#x2F;&#x2F; &#39;webapp&#39;, &#x2F;&#x2F;百度应用</span><br><span class="line">              &#39;touppercase&#39;, &#x2F;&#x2F;字母大写</span><br><span class="line">              &#39;tolowercase&#39;, &#x2F;&#x2F;字母小写</span><br><span class="line">              &#x2F;&#x2F; &#39;background&#39;, &#x2F;&#x2F;背景</span><br><span class="line">              &#x2F;&#x2F; &#39;template&#39;, &#x2F;&#x2F;模板</span><br><span class="line">              &#x2F;&#x2F; &#39;scrawl&#39;, &#x2F;&#x2F;涂鸦</span><br><span class="line">              &#x2F;&#x2F; &#39;music&#39;, &#x2F;&#x2F;音乐</span><br><span class="line">              &#39;inserttable&#39;, &#x2F;&#x2F;插入表格</span><br><span class="line">              &#x2F;&#x2F; &#39;drafts&#39;, &#x2F;&#x2F; 从草稿箱加载</span><br><span class="line">              &#x2F;&#x2F; &#39;charts&#39;, &#x2F;&#x2F; 图表</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      addCustomButtom (editorId) &#123;</span><br><span class="line">        let _this &#x3D; this</span><br><span class="line">        let img &#x3D; &#39;&#39;</span><br><span class="line">        window.UE.registerUI(&#39;test-button&#39;, function (editor, uiName) &#123;</span><br><span class="line">          &#x2F;&#x2F; 注册按钮执行时的 command 命令，使用命令默认就会带有回退操作</span><br><span class="line">          editor.registerCommand(uiName, &#123;</span><br><span class="line">            execCommand: function () &#123;</span><br><span class="line">              editor.execCommand(&#39;inserthtml&#39;, &#96;&lt;img src&#x3D;&quot;$&#123;img&#125;&quot; alt&#x3D;&quot;&quot; &#x2F;&gt;&#96;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      </span><br><span class="line">          &#x2F;&#x2F; 创建一个 button</span><br><span class="line">          var btn &#x3D; new window.UE.ui.Button(&#123;</span><br><span class="line">            &#x2F;&#x2F; 按钮的名字</span><br><span class="line">            name: uiName,</span><br><span class="line">            &#x2F;&#x2F; 提示</span><br><span class="line">            title: &#39;单图上传&#39;,</span><br><span class="line">            &#x2F;&#x2F; 需要添加的额外样式，可指定 icon 图标，图标路径参考常见问题 2</span><br><span class="line">            cssRules: &quot;background-image: url(&#39;&#x2F;static&#x2F;icons.png&#39;)!important;background-position: -380px 0px;&quot;,</span><br><span class="line">            &#x2F;&#x2F; 点击时执行的命令</span><br><span class="line">            onclick: function () &#123;</span><br><span class="line">              &#x2F;&#x2F; 这里可以不用执行命令，做你自己的操作也可</span><br><span class="line">              &#x2F;&#x2F; editor.execCommand(uiName)</span><br><span class="line">              var input &#x3D; document.createElement(&#39;input&#39;)</span><br><span class="line">              input.type &#x3D; &quot;file&quot;</span><br><span class="line">              input.style.display &#x3D; &#39;none&#39;</span><br><span class="line">              document.body.appendChild(input)</span><br><span class="line">              input.click()</span><br><span class="line">              input.addEventListener(&#39;change&#39;,(e)&#x3D;&gt;&#123;</span><br><span class="line">                &#x2F;&#x2F; 利用 axios 上传，上传成功之后销毁 DOM</span><br><span class="line">                console.log(e.target.files)</span><br><span class="line">                let sendMsg &#x3D; &#123;</span><br><span class="line">                  action: &#39;material.MaterialSalesman.getImgUrl&#39;,</span><br><span class="line">                  files: e.target.files</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F; return;</span><br><span class="line">                _this.$store.dispatch(&#39;Post&#39;, sendMsg).then((res) &#x3D;&gt; &#123;</span><br><span class="line">                  img &#x3D; res.data[0].data</span><br><span class="line">                  editor.execCommand(uiName)</span><br><span class="line">                &#125;)</span><br><span class="line">              &#125;) </span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      </span><br><span class="line">          &#x2F;&#x2F; 当点到编辑内容上时，按钮要做的状态反射</span><br><span class="line">          editor.addListener(&#39;selectionchange&#39;, function () &#123;</span><br><span class="line">            var state &#x3D; editor.queryCommandState(uiName)</span><br><span class="line">            if (state &#x3D;&#x3D;&#x3D; -1) &#123;</span><br><span class="line">              btn.setDisabled(true)</span><br><span class="line">              btn.setChecked(false)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              btn.setDisabled(false)</span><br><span class="line">              btn.setChecked(state)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">      </span><br><span class="line">          &#x2F;&#x2F; 因为你是添加 button，所以需要返回这个 button</span><br><span class="line">          return btn</span><br><span class="line">        &#125;, 0 &#x2F;* 指定添加到工具栏上的哪个位置，默认时追加到最后 *&#x2F;, editorId &#x2F;* 指定这个 UI 是哪个编辑器实例上的，默认是页面上所有的编辑器都会添加这个按钮 *&#x2F;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span><br><span class="line">&lt;style lang&#x3D;&quot;css&quot;&gt;</span><br><span class="line">  .ueditor-page &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100vh;</span><br><span class="line">    display: flex;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">  .ueditor-box &#123;</span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">  &#125;</span><br><span class="line">  .Preview &#123;</span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">    margin-left: 20px;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    overflow: auto;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>我这边还使用到了自定义按钮的功能,原理注释都在代码里面啦</p><p>以上就是我对富文本插件的一些理解,如果文章由于我学识浅薄,导致您发现有严重谬误的地方,请一定在评论中指出,我会在第一时间修正我的博文,以避免误人子弟。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr style=&#39;filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)&#39; color=&#39;#FF0000&#39; size=&#39;1&#39; /&gt;

&lt;blockquote&gt;
&lt;p&gt;推荐一个好用的富文本编辑器,之前也有用过其他版本的,但是都太简易了&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="vue-cli" scheme="https://www.chensheng.group/categories/vue-cli/"/>
    
    
      <category term="vue-cli" scheme="https://www.chensheng.group/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的执行顺序</title>
    <link href="https://www.chensheng.group/2020/07/04/133-JavaScript%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <id>https://www.chensheng.group/2020/07/04/133-JavaScript%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</id>
    <published>2020-07-04T05:35:00.000Z</published>
    <updated>2021-06-20T13:12:17.985Z</updated>
    
    <content type="html"><![CDATA[<hr style='filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)' color='#FF0000' size='1' /><blockquote><p>如何理解JavaScript的事件循环?什么是宏任务和微任务?怎么理解消息队列的执行顺序?</p></blockquote><a id="more"></a><p>由于我们是一个前端的开发者,所以大多数接触到的是浏览器或者Node,我们该如何去使用JavaScript 引擎。</p><p>当拿到一段 JavaScript 代码时,浏览器或者 Node 环境首先要做的就是,传递给 JavaScript 引擎,并且要求它去执行。</p><p>我们都知道JavaScript是单线程,但是执行 JavaScript 并非一步到位,宿主环境当遇到一些事件时,会继续把一段代码传递给 JavaScript 引擎去执行,此外,我们可能还会提供 API 给 JavaScript 引擎,比如 setTimeout 这样的 API,它会允许 JavaScript 在特定的时机执行。</p><div class="note info">            <p>所以,我们首先应该形成一个感性的认知：一个 JavaScript 引擎会常驻于内存中,它等待着我们（宿主）把 JavaScript 代码或者函数传递给它执行。</p>          </div><p>在 ES3 和更早的版本中,JavaScript 本身还没有异步执行代码的能力,这也就意味着,宿主环境传递给 JavaScript 引擎一段代码,引擎就把代码直接顺次执行了,这个任务也就是宿主发起的任务。</p><p>但是,在 ES5 之后,JavaScript 引入了 Promise,这样,不需要浏览器的安排,JavaScript 引擎本身也可以发起任务了。</p><p>我们采纳 JSC 引擎的术语,把宿主发起的任务称为宏观任务,把 JavaScript 引擎发起的任务称为微观任务。</p><h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><p>JavaScript 引擎等待宿主环境分配宏观任务,在操作系统中,通常等待的行为都是一个事件循环,所以在 Node 术语中,也会把这个部分称为事件循环(event loop)。</p><p>JavaScript是单线程异步处理,其实也都是通过事件循环来实现的异步或模拟’多线程’。</p><ul><li><p>同步和异步任务在不同的执行”场所”,同步的进入主线程,异步的进入Event Table执行并注册函数。</p></li><li><p>当指定的异步事情完成时,Event Table会将这个函数移入Event Queue。</p></li><li><p>主线程内的任务执行完毕为空,会去Event Queue读取对应的函数,推入主线程执行。</p></li><li><p>js引擎的monitoring process进程会持续不断的检查主线程执行栈是否为空,一旦为空,就会去Event Queue那里检查是否有等待被调用的函数。上述过程会不断重复,也就是常说的Event Loop(事件循环)。</p></li></ul><p>用个例子说明上述过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let data &#x3D; [];</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  url:www.javascript.com,</span><br><span class="line">  data:data,</span><br><span class="line">  success:() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;发送成功!&#39;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(&#39;代码执行结束&#39;);</span><br></pre></td></tr></table></figure><ul><li><p>ajax（异步任务）进入Event Table,注册回调函数success。</p></li><li><p>执行console.log(‘代码执行结束’)。（同步任务在主线程执行）</p></li><li><p>ajax事件完成,回调函数success进入Event Queue。</p></li><li><p>主线程从Event Queue读取回调函数success并执行。</p></li></ul><p>我们可以大概理解：宏观任务的队列就相当于事件循环。总结起来就是下面这样</p><p>主任务(宏任务)完 ——&gt; 所有微任务 ——&gt; 宏任务（找到宏任务其中一个任务队列执行,其中如果又有微任务,该任务队列执行完就执行微任务）——&gt; 宏任务中另外一个任务队列（里面有微任务就再执行微任务）。</p><p><img src="https://csblogimage.oss-cn-hangzhou.aliyuncs.com/133-Js%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,size_16,text_Qnku6ZmI5YWI55Sf55qE5bCP5YmN56uv,color_FFFFFF,shadow_50,t_100,g_se,x_10,y_10" alt="图片"></p><h3 id="宏观任务-MacroTask-和微观任务-MicroTask"><a href="#宏观任务-MacroTask-和微观任务-MicroTask" class="headerlink" title="宏观任务(MacroTask)和微观任务(MicroTask)"></a>宏观任务(MacroTask)和微观任务(MicroTask)</h3><p>之前我们说过了,宿主发起的任务称为宏观任务,把 JavaScript 引擎发起的任务称为微观任务</p><p>除了广义的同步任务和异步任务,我们对任务有更精细的定义:</p><p>macro-task(宏任务): 包括整体代码script,setTimeout,setInterval</p><p>micro-task(微任务): Promise,process.nextTick</p><p>那宏观任务和微观任务有什么关系呢?</p><p>在宏观任务中,JavaScript 的 Promise 还会产生异步代码,JavaScript 必须保证这些异步代码在一个宏观任务中完成,因此,每个宏观任务中又包含了一个微观任务队列</p><p>有了宏观任务和微观任务机制,我们就可以实现 JavaScript 引擎级和宿主级的任务了,例如：Promise 永远在队列尾部添加微观任务。setTimeout 等宿主 API,则会添加宏观任务。</p><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><p>Promise我们已经讲过很多次了,这里就不再重复说了,再看一次我之前再其他博客写过的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(function()&#123; </span><br><span class="line">  console.log(4)</span><br><span class="line">&#125;, 0);</span><br><span class="line">new Promise(function(resolve)&#123;</span><br><span class="line">  console.log(1)</span><br><span class="line">  for( var i &#x3D; 0 ; i &lt; 10000 ; i++ )&#123;</span><br><span class="line">    i &#x3D;&#x3D; 9999 &amp;&amp; resolve()</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(2)</span><br><span class="line">&#125;).then(function()&#123;</span><br><span class="line">  console.log(5)</span><br><span class="line">&#125;);</span><br><span class="line">console.log(3);</span><br></pre></td></tr></table></figure><p>打印的结果是 ‘1, 2, 3, 5, 4’, 具体详情可以参考这篇博客 <a href="https://www.chensheng.group/2019/10/10/106-JS高频考题分享/">陈先生的小前端-JS高频考题分享</a></p><p>我们发现,不论代码顺序如何,4 必定发生在 5 之后,因为 Promise 产生的是 JavaScript 引擎内部的微任务,而 setTimeout 是浏览器 API,它产生宏任务。</p><p>为了理解微任务始终先于宏任务,我们设计一个实验：执行一个耗时 1 秒的 Promise。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line">  console.log(&quot;6&quot;)</span><br><span class="line">&#125;, 0) </span><br><span class="line">var r &#x3D; new Promise((resolve, reject)&#x3D;&gt;&#123;</span><br><span class="line">  console.log(&#39;1&#39;)</span><br><span class="line">  resolve()</span><br><span class="line">&#125;); </span><br><span class="line">r.then(()&#x3D;&gt;&#123;</span><br><span class="line">  console.log(&#39;3&#39;)</span><br><span class="line">  var begin &#x3D; Date.now(); </span><br><span class="line">  while(Date.now() - begin &lt; 1000);</span><br><span class="line">  console.log(&quot;4&quot;) </span><br><span class="line">  new Promise((resolve, reject)&#x3D;&gt;&#123; </span><br><span class="line">    resolve()</span><br><span class="line">  &#125;).then(() &#x3D;&gt; console.log(&quot;5&quot;))</span><br><span class="line">&#125;);</span><br><span class="line">console.log(&#39;2&#39;)</span><br></pre></td></tr></table></figure><p>这里我们强制了 1 秒的执行耗时,这样,我们可以确保任务 5 是在 6 之后被添加到任务队列。<br>我们可以看到,即使耗时一秒的 4 执行完毕,再 enque 的 5,仍然先于 6 执行了,这很好地解释了微任务优先的原理。</p><p>通过一系列的实验,我们可以总结一下如何分析异步执行的顺序：</p><ul><li>首先我们分析有多少个宏任务；</li><li>在每个宏任务中,分析有多少个微任务；</li><li>根据调用次序,确定宏任务中的微任务执行次序；</li><li>根据宏任务的触发规则和调用次序,确定宏任务的执行次序；</li><li>确定整个顺序。</li></ul><p>Promise 是 JavaScript 中的一个定义,但是实际编写代码时,我们可以发现,它似乎并不比回调的方式书写更简单,但是从 ES6 开始,我们有了 async/await,这个语法改进跟 Promise 配合,能够有效地改善代码结构。</p><p>之前一直没有说async/await, 今天刚好一起介绍一下</p><h4 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h4><p>其实async/await 就是 promise的一个语法糖,让我们的代码看起来像是同步,更加的美观,先来看一下基本用法</p><p>async 函数必定返回 Promise,我们把所有返回 Promise 的函数都可以认为是异步函数。</p><p>async 函数是一种特殊语法,特征是在 function 关键字之前加上 async 关键字,这样,就定义了一个 async 函数,我们可以在其中使用 await 来等待一个 Promise。</p><p>另外还有一个很有意思的语法规定,await 只能出现在 async 函数中。</p><p>我们先看看async 起什么作用,而他又是怎么处理他的返回值的</p><p>举个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  testAsync() &#123;</span><br><span class="line">    return &quot;hello async&quot;;</span><br><span class="line">  &#125;,</span><br><span class="line">  async testAsync2() &#123;</span><br><span class="line">    return &quot;hello async&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别输出这两个函数,你会发现很有趣的地方</p><p>async 函数返回的是一个 Promise 对象,如果在函数中 return 一个直接量,async 会把这个直接量通过 Promise.resolve() 封装成 Promise 对象。</p><p>假设我们没有return东西,那它就会返回一个Promise.resolve(undefined)。</p><blockquote><p>补充知识点: Promise.resolve(x) 可以看作是 new Promise(resolve =&gt; resolve(x)) 的简写,可以用于快速封装字面量对象或其他对象,将其封装成 Promise 实例。</p></blockquote><p>现在来看看await,他等的是什么?</p><p>一般来说,都认为 await 是在等待一个 async 函数完成。其实也可以用来等待普通函数,所以实际上 await 等是一个返回值 </p><p>举个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  async getData()&#123;</span><br><span class="line">    let sendMessage &#x3D; &#123;</span><br><span class="line">      url: &#39;&#x2F;v2&#x2F;music&#x2F;search?q&#x3D;周杰伦&#39;,</span><br><span class="line">      PostData: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return await this.$store.dispatch(&#39;Get&#39;, sendMessage) &#x2F;&#x2F; 这个是封装的方法,返回的是一个promise</span><br><span class="line">  &#125;,</span><br><span class="line">  test()&#123;</span><br><span class="line">    return &#39;music&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  async lookData()&#123;</span><br><span class="line">    let m1 &#x3D; await this.getData()</span><br><span class="line">    let m2 &#x3D; await this.test()</span><br><span class="line">    console.log(m1, m2)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;,</span><br><span class="line">created() &#123;</span><br><span class="line">  this.lookData() &#x2F;&#x2F; m1和m2都可以输出</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单一的 Promise 链并不能发现 async/await 的优势,但是,如果需要处理由多个 Promise 组成的 then 链的时候,优势就能体现出来了</p><p>我们之前是用Promise 通过 then 链来解决多层回调地狱的问题</p><p>现在又可以使用 async/await 来进一步优化它,看起来更像一个同步了。</p><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>为了更好的理解 事件循环,宏观任务,微观任务,以及任务队列,直接上代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;1&#39;); &#x2F;&#x2F;第一轮主线程【1】</span><br><span class="line"> </span><br><span class="line">setTimeout(function() &#123; &#x2F;&#x2F;碰到set异步，丢入宏任务队列【set1】：我将它命名为set1</span><br><span class="line">     console.log(&#39;2&#39;);&#x2F;&#x2F;第二轮宏任务执行，输出【2】</span><br><span class="line">     process.nextTick(function() &#123;&#x2F;&#x2F;第二轮宏任务执行，碰到process，丢入微任务队列，【3】</span><br><span class="line">         console.log(&#39;3&#39;);</span><br><span class="line">     &#125;)</span><br><span class="line">     new Promise(function(resolve) &#123;&#x2F;&#x2F;第二轮宏任务执行，输出【2，4】</span><br><span class="line">         console.log(&#39;4&#39;);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(function() &#123;</span><br><span class="line">        console.log(&#39;5&#39;)&#x2F;&#x2F;第二轮宏任务执行，碰到then丢入微任务队列，【3，5】</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">process.nextTick(function() &#123; &#x2F;&#x2F;碰到process，丢入微任务队列【6】</span><br><span class="line">    console.log(&#39;6&#39;); &#x2F;&#x2F;第一轮微任务执行</span><br><span class="line">&#125;)</span><br><span class="line">new Promise(function(resolve) &#123; </span><br><span class="line">    console.log(&#39;7&#39;); &#x2F;&#x2F;new的同时执行代码，第一轮主线程此时输出【1，7】</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(function() &#123;</span><br><span class="line">    console.log(&#39;8&#39;) &#x2F;&#x2F;第一轮主线程中promise的then丢入微任务队列，此时微任务队列为【6，8】。当第一轮微任务执行，顺序输出【6，8】</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(function() &#123; &#x2F;&#x2F;碰到set异步丢入宏任务队列，此时宏任务队列【set1.set2】：我将它命名为set2</span><br><span class="line">    console.log(&#39;9&#39;);&#x2F;&#x2F;第三轮宏任务执行，输出【9】</span><br><span class="line">    process.nextTick(function() &#123; &#x2F;&#x2F;第三轮宏中执行过程中添加到微任务【10】</span><br><span class="line">        console.log(&#39;10&#39;);</span><br><span class="line">    &#125;)</span><br><span class="line">    new Promise(function(resolve) &#123;</span><br><span class="line">        console.log(&#39;11&#39;);&#x2F;&#x2F;第三轮宏任务执行，宏任务累计输出【9,11】</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(function() &#123;</span><br><span class="line">        console.log(&#39;12&#39;) &#x2F;&#x2F;第三轮宏中执行过程中添加到微任务【10，12】</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>解答: </p><p>第一轮：主线程输出：【1，7】，添加宏任务【set1，set2】，添加微任务【6，8】。执行完主线程，然后执行微任务输出【6，8】</p><p>第二轮：执行宏任务其中一个任务队列set1:输出【2，4】，执行任务的过程，碰到有微任务，所以在微任务队列添加输出【3，5】的微任务，在set1宏任务执行完就执行该微任务，第二轮总输出：【2，4，3，5】</p><p>第三轮：执行任务另一个任务队列set2：输出【9，11】，执行任务的过程，碰到有微任任务，所以在微任务队列添加输出【10，12】的微任务，在set2宏任务执行完就执行该微任务，第三轮总输出：【9，11，10，12】</p><p>整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。(请注意，node环境下的事件监听依赖libuv与前端环境不完全相同，输出顺序可能会有误差)</p><p>以上就是我对JavaScript执行的一些理解,如果文章由于我学识浅薄,导致您发现有严重谬误的地方,请一定在评论中指出,我会在第一时间修正我的博文,以避免误人子弟。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr style=&#39;filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)&#39; color=&#39;#FF0000&#39; size=&#39;1&#39; /&gt;

&lt;blockquote&gt;
&lt;p&gt;如何理解JavaScript的事件循环?什么是宏任务和微任务?怎么理解消息队列的执行顺序?&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="javaScript" scheme="https://www.chensheng.group/categories/javaScript/"/>
    
    
      <category term="javaScript" scheme="https://www.chensheng.group/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>element-ui动态换肤</title>
    <link href="https://www.chensheng.group/2020/06/27/132-element-ui%E5%8A%A8%E6%80%81%E6%8D%A2%E8%82%A4/"/>
    <id>https://www.chensheng.group/2020/06/27/132-element-ui%E5%8A%A8%E6%80%81%E6%8D%A2%E8%82%A4/</id>
    <published>2020-06-27T03:30:00.000Z</published>
    <updated>2020-07-04T05:49:23.741Z</updated>
    
    <content type="html"><![CDATA[<hr style='filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)' color='#FF0000' size='1' /><blockquote><p>element-ui这个框架想必大家都不陌生,今天学习一下如何动态更改主题色</p></blockquote><a id="more"></a><p>官网有提供改变主题色的方法,但是那个仅适用于一次性的更改全局主题颜色</p><p>如果我们想要实时根据ColorPicker颜色选择器进行动态换肤,要怎么实现呢</p><p>首先新建一个vue组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-tooltip effect&#x3D;&quot;dark&quot; content&#x3D;&quot;theme&quot; placement&#x3D;&quot;bottom&quot;&gt;</span><br><span class="line">    &lt;el-color-picker</span><br><span class="line">    v-model&#x3D;&quot;theme&quot;</span><br><span class="line">    class&#x3D;&quot;theme-picker&quot;</span><br><span class="line">    size&#x3D;&quot;small&quot;</span><br><span class="line">    popper-class&#x3D;&quot;theme-picker-dropdown&quot;&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;el-tooltip&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">const version &#x3D; require(&#39;element-ui&#x2F;package.json&#39;).version &#x2F;&#x2F; element-ui version from node_modules</span><br><span class="line">const ORIGINAL_THEME &#x3D; &#39;#409EFF&#39; &#x2F;&#x2F; default color</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      chalk: &#39;&#39;, &#x2F;&#x2F; content of theme-chalk css</span><br><span class="line">      theme: ORIGINAL_THEME</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    theme(val, oldVal) &#123;</span><br><span class="line">      if (typeof val !&#x3D;&#x3D; &#39;string&#39;) return</span><br><span class="line">      const themeCluster &#x3D; this.getThemeCluster(val.replace(&#39;#&#39;, &#39;&#39;))</span><br><span class="line">      const originalCluster &#x3D; this.getThemeCluster(oldVal.replace(&#39;#&#39;, &#39;&#39;))</span><br><span class="line">      const getHandler &#x3D; (variable, id) &#x3D;&gt; &#123;</span><br><span class="line">        return () &#x3D;&gt; &#123;</span><br><span class="line">          const originalCluster &#x3D; this.getThemeCluster(ORIGINAL_THEME.replace(&#39;#&#39;, &#39;&#39;))</span><br><span class="line">          const newStyle &#x3D; this.updateStyle(this[variable], originalCluster, themeCluster)</span><br><span class="line"></span><br><span class="line">          let styleTag &#x3D; document.getElementById(id)</span><br><span class="line">          if (!styleTag) &#123;</span><br><span class="line">            styleTag &#x3D; document.createElement(&#39;style&#39;)</span><br><span class="line">            styleTag.setAttribute(&#39;id&#39;, id)</span><br><span class="line">            document.head.appendChild(styleTag)</span><br><span class="line">          &#125;</span><br><span class="line">          styleTag.innerText &#x3D; newStyle</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      const chalkHandler &#x3D; getHandler(&#39;chalk&#39;, &#39;chalk-style&#39;)</span><br><span class="line"></span><br><span class="line">      if (!this.chalk) &#123;</span><br><span class="line">        const url &#x3D; &#96;https:&#x2F;&#x2F;unpkg.com&#x2F;element-ui@$&#123;version&#125;&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&#96;</span><br><span class="line">        this.getCSSString(url, chalkHandler, &#39;chalk&#39;)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        chalkHandler()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      const styles &#x3D; [].slice.call(document.querySelectorAll(&#39;style&#39;))</span><br><span class="line">        .filter(style &#x3D;&gt; &#123;</span><br><span class="line">          const text &#x3D; style.innerText</span><br><span class="line">          return new RegExp(oldVal, &#39;i&#39;).test(text) &amp;&amp; !&#x2F;Chalk Variables&#x2F;.test(text)</span><br><span class="line">        &#125;)</span><br><span class="line">      styles.forEach(style &#x3D;&gt; &#123;</span><br><span class="line">        const &#123; innerText &#125; &#x3D; style</span><br><span class="line">        if (typeof innerText !&#x3D;&#x3D; &#39;string&#39;) return</span><br><span class="line">        style.innerText &#x3D; this.updateStyle(innerText, originalCluster, themeCluster)</span><br><span class="line">      &#125;)</span><br><span class="line">      this.$message(&#123;</span><br><span class="line">        message: &#39;换肤成功&#39;,</span><br><span class="line">        type: &#39;success&#39;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    updateStyle(style, oldCluster, newCluster) &#123;</span><br><span class="line">      let newStyle &#x3D; style</span><br><span class="line">      oldCluster.forEach((color, index) &#x3D;&gt; &#123;</span><br><span class="line">        newStyle &#x3D; newStyle.replace(new RegExp(color, &#39;ig&#39;), newCluster[index])</span><br><span class="line">      &#125;)</span><br><span class="line">      return newStyle</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    getCSSString(url, callback, variable) &#123;</span><br><span class="line">      const xhr &#x3D; new XMLHttpRequest()</span><br><span class="line">      xhr.onreadystatechange &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        if (xhr.readyState &#x3D;&#x3D;&#x3D; 4 &amp;&amp; xhr.status &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">          this[variable] &#x3D; xhr.responseText.replace(&#x2F;@font-face&#123;[^&#125;]+&#125;&#x2F;, &#39;&#39;)</span><br><span class="line">          callback()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      xhr.open(&#39;GET&#39;, url)</span><br><span class="line">      xhr.send()</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    getThemeCluster(theme) &#123;</span><br><span class="line">      const tintColor &#x3D; (color, tint) &#x3D;&gt; &#123;</span><br><span class="line">        let red &#x3D; parseInt(color.slice(0, 2), 16)</span><br><span class="line">        let green &#x3D; parseInt(color.slice(2, 4), 16)</span><br><span class="line">        let blue &#x3D; parseInt(color.slice(4, 6), 16)</span><br><span class="line"></span><br><span class="line">        if (tint &#x3D;&#x3D;&#x3D; 0) &#123; &#x2F;&#x2F; when primary color is in its rgb space</span><br><span class="line">          return [red, green, blue].join(&#39;,&#39;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          red +&#x3D; Math.round(tint * (255 - red))</span><br><span class="line">          green +&#x3D; Math.round(tint * (255 - green))</span><br><span class="line">          blue +&#x3D; Math.round(tint * (255 - blue))</span><br><span class="line"></span><br><span class="line">          red &#x3D; red.toString(16)</span><br><span class="line">          green &#x3D; green.toString(16)</span><br><span class="line">          blue &#x3D; blue.toString(16)</span><br><span class="line"></span><br><span class="line">          return &#96;#$&#123;red&#125;$&#123;green&#125;$&#123;blue&#125;&#96;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      const shadeColor &#x3D; (color, shade) &#x3D;&gt; &#123;</span><br><span class="line">        let red &#x3D; parseInt(color.slice(0, 2), 16)</span><br><span class="line">        let green &#x3D; parseInt(color.slice(2, 4), 16)</span><br><span class="line">        let blue &#x3D; parseInt(color.slice(4, 6), 16)</span><br><span class="line"></span><br><span class="line">        red &#x3D; Math.round((1 - shade) * red)</span><br><span class="line">        green &#x3D; Math.round((1 - shade) * green)</span><br><span class="line">        blue &#x3D; Math.round((1 - shade) * blue)</span><br><span class="line"></span><br><span class="line">        red &#x3D; red.toString(16)</span><br><span class="line">        green &#x3D; green.toString(16)</span><br><span class="line">        blue &#x3D; blue.toString(16)</span><br><span class="line"></span><br><span class="line">        return &#96;#$&#123;red&#125;$&#123;green&#125;$&#123;blue&#125;&#96;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      const clusters &#x3D; [theme]</span><br><span class="line">      for (let i &#x3D; 0; i &lt;&#x3D; 9; i++) &#123;</span><br><span class="line">        clusters.push(tintColor(theme, Number((i &#x2F; 10).toFixed(2))))</span><br><span class="line">      &#125;</span><br><span class="line">      clusters.push(shadeColor(theme, 0.1))</span><br><span class="line">      return clusters</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>然后引入它就可以直接使用了</p><p>感觉各位大佬的无私分享</p>]]></content>
    
    <summary type="html">
    
      &lt;hr style=&#39;filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)&#39; color=&#39;#FF0000&#39; size=&#39;1&#39; /&gt;

&lt;blockquote&gt;
&lt;p&gt;element-ui这个框架想必大家都不陌生,今天学习一下如何动态更改主题色&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="element" scheme="https://www.chensheng.group/categories/element/"/>
    
    
      <category term="element" scheme="https://www.chensheng.group/tags/element/"/>
    
  </entry>
  
  <entry>
    <title>神器扒网站——teleport ultra</title>
    <link href="https://www.chensheng.group/2020/06/26/131-%E7%88%AC%E7%BD%91%E7%AB%99%E7%A5%9E%E5%99%A8/"/>
    <id>https://www.chensheng.group/2020/06/26/131-%E7%88%AC%E7%BD%91%E7%AB%99%E7%A5%9E%E5%99%A8/</id>
    <published>2020-06-26T07:31:00.000Z</published>
    <updated>2020-06-26T07:31:54.880Z</updated>
    
    <content type="html"><![CDATA[<hr style='filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)' color='#FF0000' size='1' /><blockquote><p>在平时的开发或者学习的过程中，我们难免会看到一些让人心动的网站，于是自己想把它搞下来，自己手工一个文件一个文件把它保存下来也可以实现，完成了也累得够呛，有一款扒站的神器，可以把你所喜欢的目标网站整个网站给扒下来，这个神器就是teleport ultra！</p></blockquote><a id="more"></a><h3 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h3><p>首先到官网下载：<a href="http://www.tenmax.com/teleport/ultra/download.htm" target="_blank" rel="noopener">http://www.tenmax.com/teleport/ultra/download.htm</a> 然后按照软件的安装指引完成安装</p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p>打开软件 </p><p>点击File，然后点击 New Project Wizred…，选择第一项，点击下一步 </p><p>然后在输入框输入你要扒的网站的地址，点击下一步 </p><p>选择everything，点击下一步，然后点击完成 </p><p>选择本地保存网站源文件的路径后，点击保存 </p><p>再单击start，即开始扒网站的文件 </p><p>搞定 </p>]]></content>
    
    <summary type="html">
    
      &lt;hr style=&#39;filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)&#39; color=&#39;#FF0000&#39; size=&#39;1&#39; /&gt;

&lt;blockquote&gt;
&lt;p&gt;在平时的开发或者学习的过程中，我们难免会看到一些让人心动的网站，于是自己想把它搞下来，自己手工一个文件一个文件把它保存下来也可以实现，完成了也累得够呛，有一款扒站的神器，可以把你所喜欢的目标网站整个网站给扒下来，这个神器就是teleport ultra！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="teleport" scheme="https://www.chensheng.group/categories/teleport/"/>
    
    
      <category term="teleport" scheme="https://www.chensheng.group/tags/teleport/"/>
    
  </entry>
  
  <entry>
    <title>echars地图数据下钻</title>
    <link href="https://www.chensheng.group/2020/06/26/130-Echart%E5%85%A8%E5%9B%BD%E5%9C%B0%E5%9B%BE%E4%B8%8B%E9%92%BB/"/>
    <id>https://www.chensheng.group/2020/06/26/130-Echart%E5%85%A8%E5%9B%BD%E5%9C%B0%E5%9B%BE%E4%B8%8B%E9%92%BB/</id>
    <published>2020-06-26T06:43:00.000Z</published>
    <updated>2020-06-26T07:09:30.225Z</updated>
    
    <content type="html"><![CDATA[<hr style='filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)' color='#FF0000' size='1' /><blockquote><p>项目中使用到echart的地图,在此记录一下</p></blockquote><a id="more"></a><p>首先引入map的json数据,然后放在static文件中</p><p>可以去我的网盘中下载</p><p>链接: <a href="https://pan.baidu.com/s/1lUbJvVYDPvfrhRxuPuN48w" target="_blank" rel="noopener">https://pan.baidu.com/s/1lUbJvVYDPvfrhRxuPuN48w</a> 提取码: ndi9</p><p>新建一个map.js,用来放各个地区的编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 34个省、市、自治区的名字拼音映射数组</span><br><span class="line">var provinces &#x3D; &#123;</span><br><span class="line">  &#x2F;&#x2F; 23个省</span><br><span class="line">  台湾: &#39;taiwan&#39;,</span><br><span class="line">  河北: &#39;hebei&#39;,</span><br><span class="line">  山西: &#39;shanxi&#39;,</span><br><span class="line">  辽宁: &#39;liaoning&#39;,</span><br><span class="line">  吉林: &#39;jilin&#39;,</span><br><span class="line">  黑龙江: &#39;heilongjiang&#39;,</span><br><span class="line">  江苏: &#39;jiangsu&#39;,</span><br><span class="line">  浙江: &#39;zhejiang&#39;,</span><br><span class="line">  安徽: &#39;anhui&#39;,</span><br><span class="line">  福建: &#39;fujian&#39;,</span><br><span class="line">  江西: &#39;jiangxi&#39;,</span><br><span class="line">  山东: &#39;shandong&#39;,</span><br><span class="line">  河南: &#39;henan&#39;,</span><br><span class="line">  湖北: &#39;hubei&#39;,</span><br><span class="line">  湖南: &#39;hunan&#39;,</span><br><span class="line">  广东: &#39;guangdong&#39;,</span><br><span class="line">  海南: &#39;hainan&#39;,</span><br><span class="line">  四川: &#39;sichuan&#39;,</span><br><span class="line">  贵州: &#39;guizhou&#39;,</span><br><span class="line">  云南: &#39;yunnan&#39;,</span><br><span class="line">  陕西: &#39;shanxi1&#39;,</span><br><span class="line">  甘肃: &#39;gansu&#39;,</span><br><span class="line">  青海: &#39;qinghai&#39;,</span><br><span class="line">  &#x2F;&#x2F; 5个自治区</span><br><span class="line">  新疆: &#39;xinjiang&#39;,</span><br><span class="line">  广西: &#39;guangxi&#39;,</span><br><span class="line">  内蒙古: &#39;neimenggu&#39;,</span><br><span class="line">  宁夏: &#39;ningxia&#39;,</span><br><span class="line">  西藏: &#39;xizang&#39;,</span><br><span class="line">  &#x2F;&#x2F; 4个直辖市</span><br><span class="line">  北京: &#39;beijing&#39;,</span><br><span class="line">  天津: &#39;tianjin&#39;,</span><br><span class="line">  上海: &#39;shanghai&#39;,</span><br><span class="line">  重庆: &#39;chongqing&#39;,</span><br><span class="line">  &#x2F;&#x2F; 2个特别行政区</span><br><span class="line">  香港: &#39;xianggang&#39;,</span><br><span class="line">  澳门: &#39;aomen&#39;</span><br><span class="line">&#125;</span><br><span class="line">var cityMap &#x3D; &#123;</span><br><span class="line">  北京市: &#39;110100&#39;,</span><br><span class="line">  天津市: &#39;120100&#39;,</span><br><span class="line">  上海市: &#39;310100&#39;,</span><br><span class="line">  重庆市: &#39;500100&#39;,</span><br><span class="line">  崇明县: &#39;310200&#39;,</span><br><span class="line">  湖北省直辖县市: &#39;429000&#39;,</span><br><span class="line">  铜仁市: &#39;522200&#39;,</span><br><span class="line">  毕节市: &#39;522400&#39;,</span><br><span class="line">  石家庄市: &#39;130100&#39;,</span><br><span class="line">  唐山市: &#39;130200&#39;,</span><br><span class="line">  秦皇岛市: &#39;130300&#39;,</span><br><span class="line">  邯郸市: &#39;130400&#39;,</span><br><span class="line">  邢台市: &#39;130500&#39;,</span><br><span class="line">  保定市: &#39;130600&#39;,</span><br><span class="line">  张家口市: &#39;130700&#39;,</span><br><span class="line">  承德市: &#39;130800&#39;,</span><br><span class="line">  沧州市: &#39;130900&#39;,</span><br><span class="line">  廊坊市: &#39;131000&#39;,</span><br><span class="line">  衡水市: &#39;131100&#39;,</span><br><span class="line">  太原市: &#39;140100&#39;,</span><br><span class="line">  大同市: &#39;140200&#39;,</span><br><span class="line">  阳泉市: &#39;140300&#39;,</span><br><span class="line">  长治市: &#39;140400&#39;,</span><br><span class="line">  晋城市: &#39;140500&#39;,</span><br><span class="line">  朔州市: &#39;140600&#39;,</span><br><span class="line">  晋中市: &#39;140700&#39;,</span><br><span class="line">  运城市: &#39;140800&#39;,</span><br><span class="line">  忻州市: &#39;140900&#39;,</span><br><span class="line">  临汾市: &#39;141000&#39;,</span><br><span class="line">  吕梁市: &#39;141100&#39;,</span><br><span class="line">  呼和浩特市: &#39;150100&#39;,</span><br><span class="line">  包头市: &#39;150200&#39;,</span><br><span class="line">  乌海市: &#39;150300&#39;,</span><br><span class="line">  赤峰市: &#39;150400&#39;,</span><br><span class="line">  通辽市: &#39;150500&#39;,</span><br><span class="line">  鄂尔多斯市: &#39;150600&#39;,</span><br><span class="line">  呼伦贝尔市: &#39;150700&#39;,</span><br><span class="line">  巴彦淖尔市: &#39;150800&#39;,</span><br><span class="line">  乌兰察布市: &#39;150900&#39;,</span><br><span class="line">  兴安盟: &#39;152200&#39;,</span><br><span class="line">  锡林郭勒盟: &#39;152500&#39;,</span><br><span class="line">  阿拉善盟: &#39;152900&#39;,</span><br><span class="line">  沈阳市: &#39;210100&#39;,</span><br><span class="line">  大连市: &#39;210200&#39;,</span><br><span class="line">  鞍山市: &#39;210300&#39;,</span><br><span class="line">  抚顺市: &#39;210400&#39;,</span><br><span class="line">  本溪市: &#39;210500&#39;,</span><br><span class="line">  丹东市: &#39;210600&#39;,</span><br><span class="line">  锦州市: &#39;210700&#39;,</span><br><span class="line">  营口市: &#39;210800&#39;,</span><br><span class="line">  阜新市: &#39;210900&#39;,</span><br><span class="line">  辽阳市: &#39;211000&#39;,</span><br><span class="line">  盘锦市: &#39;211100&#39;,</span><br><span class="line">  铁岭市: &#39;211200&#39;,</span><br><span class="line">  朝阳市: &#39;211300&#39;,</span><br><span class="line">  葫芦岛市: &#39;211400&#39;,</span><br><span class="line">  长春市: &#39;220100&#39;,</span><br><span class="line">  吉林市: &#39;220200&#39;,</span><br><span class="line">  四平市: &#39;220300&#39;,</span><br><span class="line">  辽源市: &#39;220400&#39;,</span><br><span class="line">  通化市: &#39;220500&#39;,</span><br><span class="line">  白山市: &#39;220600&#39;,</span><br><span class="line">  松原市: &#39;220700&#39;,</span><br><span class="line">  白城市: &#39;220800&#39;,</span><br><span class="line">  延边朝鲜族自治州: &#39;222400&#39;,</span><br><span class="line">  哈尔滨市: &#39;230100&#39;,</span><br><span class="line">  齐齐哈尔市: &#39;230200&#39;,</span><br><span class="line">  鸡西市: &#39;230300&#39;,</span><br><span class="line">  鹤岗市: &#39;230400&#39;,</span><br><span class="line">  双鸭山市: &#39;230500&#39;,</span><br><span class="line">  大庆市: &#39;230600&#39;,</span><br><span class="line">  伊春市: &#39;230700&#39;,</span><br><span class="line">  佳木斯市: &#39;230800&#39;,</span><br><span class="line">  七台河市: &#39;230900&#39;,</span><br><span class="line">  牡丹江市: &#39;231000&#39;,</span><br><span class="line">  黑河市: &#39;231100&#39;,</span><br><span class="line">  绥化市: &#39;231200&#39;,</span><br><span class="line">  大兴安岭地区: &#39;232700&#39;,</span><br><span class="line">  南京市: &#39;320100&#39;,</span><br><span class="line">  无锡市: &#39;320200&#39;,</span><br><span class="line">  徐州市: &#39;320300&#39;,</span><br><span class="line">  常州市: &#39;320400&#39;,</span><br><span class="line">  苏州市: &#39;320500&#39;,</span><br><span class="line">  南通市: &#39;320600&#39;,</span><br><span class="line">  连云港市: &#39;320700&#39;,</span><br><span class="line">  淮安市: &#39;320800&#39;,</span><br><span class="line">  盐城市: &#39;320900&#39;,</span><br><span class="line">  扬州市: &#39;321000&#39;,</span><br><span class="line">  镇江市: &#39;321100&#39;,</span><br><span class="line">  泰州市: &#39;321200&#39;,</span><br><span class="line">  宿迁市: &#39;321300&#39;,</span><br><span class="line">  杭州市: &#39;330100&#39;,</span><br><span class="line">  宁波市: &#39;330200&#39;,</span><br><span class="line">  温州市: &#39;330300&#39;,</span><br><span class="line">  嘉兴市: &#39;330400&#39;,</span><br><span class="line">  湖州市: &#39;330500&#39;,</span><br><span class="line">  绍兴市: &#39;330600&#39;,</span><br><span class="line">  金华市: &#39;330700&#39;,</span><br><span class="line">  衢州市: &#39;330800&#39;,</span><br><span class="line">  舟山市: &#39;330900&#39;,</span><br><span class="line">  台州市: &#39;331000&#39;,</span><br><span class="line">  丽水市: &#39;331100&#39;,</span><br><span class="line">  合肥市: &#39;340100&#39;,</span><br><span class="line">  芜湖市: &#39;340200&#39;,</span><br><span class="line">  蚌埠市: &#39;340300&#39;,</span><br><span class="line">  淮南市: &#39;340400&#39;,</span><br><span class="line">  马鞍山市: &#39;340500&#39;,</span><br><span class="line">  淮北市: &#39;340600&#39;,</span><br><span class="line">  铜陵市: &#39;340700&#39;,</span><br><span class="line">  安庆市: &#39;340800&#39;,</span><br><span class="line">  黄山市: &#39;341000&#39;,</span><br><span class="line">  滁州市: &#39;341100&#39;,</span><br><span class="line">  阜阳市: &#39;341200&#39;,</span><br><span class="line">  宿州市: &#39;341300&#39;,</span><br><span class="line">  六安市: &#39;341500&#39;,</span><br><span class="line">  亳州市: &#39;341600&#39;,</span><br><span class="line">  池州市: &#39;341700&#39;,</span><br><span class="line">  宣城市: &#39;341800&#39;,</span><br><span class="line">  福州市: &#39;350100&#39;,</span><br><span class="line">  厦门市: &#39;350200&#39;,</span><br><span class="line">  莆田市: &#39;350300&#39;,</span><br><span class="line">  三明市: &#39;350400&#39;,</span><br><span class="line">  泉州市: &#39;350500&#39;,</span><br><span class="line">  漳州市: &#39;350600&#39;,</span><br><span class="line">  南平市: &#39;350700&#39;,</span><br><span class="line">  龙岩市: &#39;350800&#39;,</span><br><span class="line">  宁德市: &#39;350900&#39;,</span><br><span class="line">  南昌市: &#39;360100&#39;,</span><br><span class="line">  景德镇市: &#39;360200&#39;,</span><br><span class="line">  萍乡市: &#39;360300&#39;,</span><br><span class="line">  九江市: &#39;360400&#39;,</span><br><span class="line">  新余市: &#39;360500&#39;,</span><br><span class="line">  鹰潭市: &#39;360600&#39;,</span><br><span class="line">  赣州市: &#39;360700&#39;,</span><br><span class="line">  吉安市: &#39;360800&#39;,</span><br><span class="line">  宜春市: &#39;360900&#39;,</span><br><span class="line">  抚州市: &#39;361000&#39;,</span><br><span class="line">  上饶市: &#39;361100&#39;,</span><br><span class="line">  济南市: &#39;370100&#39;,</span><br><span class="line">  青岛市: &#39;370200&#39;,</span><br><span class="line">  淄博市: &#39;370300&#39;,</span><br><span class="line">  枣庄市: &#39;370400&#39;,</span><br><span class="line">  东营市: &#39;370500&#39;,</span><br><span class="line">  烟台市: &#39;370600&#39;,</span><br><span class="line">  潍坊市: &#39;370700&#39;,</span><br><span class="line">  济宁市: &#39;370800&#39;,</span><br><span class="line">  泰安市: &#39;370900&#39;,</span><br><span class="line">  威海市: &#39;371000&#39;,</span><br><span class="line">  日照市: &#39;371100&#39;,</span><br><span class="line">  莱芜市: &#39;371200&#39;,</span><br><span class="line">  临沂市: &#39;371300&#39;,</span><br><span class="line">  德州市: &#39;371400&#39;,</span><br><span class="line">  聊城市: &#39;371500&#39;,</span><br><span class="line">  滨州市: &#39;371600&#39;,</span><br><span class="line">  菏泽市: &#39;371700&#39;,</span><br><span class="line">  郑州市: &#39;410100&#39;,</span><br><span class="line">  开封市: &#39;410200&#39;,</span><br><span class="line">  洛阳市: &#39;410300&#39;,</span><br><span class="line">  平顶山市: &#39;410400&#39;,</span><br><span class="line">  安阳市: &#39;410500&#39;,</span><br><span class="line">  鹤壁市: &#39;410600&#39;,</span><br><span class="line">  新乡市: &#39;410700&#39;,</span><br><span class="line">  焦作市: &#39;410800&#39;,</span><br><span class="line">  濮阳市: &#39;410900&#39;,</span><br><span class="line">  许昌市: &#39;411000&#39;,</span><br><span class="line">  漯河市: &#39;411100&#39;,</span><br><span class="line">  三门峡市: &#39;411200&#39;,</span><br><span class="line">  南阳市: &#39;411300&#39;,</span><br><span class="line">  商丘市: &#39;411400&#39;,</span><br><span class="line">  信阳市: &#39;411500&#39;,</span><br><span class="line">  周口市: &#39;411600&#39;,</span><br><span class="line">  驻马店市: &#39;411700&#39;,</span><br><span class="line">  省直辖县级行政区划: &#39;469000&#39;,</span><br><span class="line">  武汉市: &#39;420100&#39;,</span><br><span class="line">  黄石市: &#39;420200&#39;,</span><br><span class="line">  十堰市: &#39;420300&#39;,</span><br><span class="line">  宜昌市: &#39;420500&#39;,</span><br><span class="line">  襄阳市: &#39;420600&#39;,</span><br><span class="line">  鄂州市: &#39;420700&#39;,</span><br><span class="line">  荆门市: &#39;420800&#39;,</span><br><span class="line">  孝感市: &#39;420900&#39;,</span><br><span class="line">  荆州市: &#39;421000&#39;,</span><br><span class="line">  黄冈市: &#39;421100&#39;,</span><br><span class="line">  咸宁市: &#39;421200&#39;,</span><br><span class="line">  随州市: &#39;421300&#39;,</span><br><span class="line">  恩施土家族苗族自治州: &#39;422800&#39;,</span><br><span class="line">  长沙市: &#39;430100&#39;,</span><br><span class="line">  株洲市: &#39;430200&#39;,</span><br><span class="line">  湘潭市: &#39;430300&#39;,</span><br><span class="line">  衡阳市: &#39;430400&#39;,</span><br><span class="line">  邵阳市: &#39;430500&#39;,</span><br><span class="line">  岳阳市: &#39;430600&#39;,</span><br><span class="line">  常德市: &#39;430700&#39;,</span><br><span class="line">  张家界市: &#39;430800&#39;,</span><br><span class="line">  益阳市: &#39;430900&#39;,</span><br><span class="line">  郴州市: &#39;431000&#39;,</span><br><span class="line">  永州市: &#39;431100&#39;,</span><br><span class="line">  怀化市: &#39;431200&#39;,</span><br><span class="line">  娄底市: &#39;431300&#39;,</span><br><span class="line">  湘西土家族苗族自治州: &#39;433100&#39;,</span><br><span class="line">  广州市: &#39;440100&#39;,</span><br><span class="line">  韶关市: &#39;440200&#39;,</span><br><span class="line">  深圳市: &#39;440300&#39;,</span><br><span class="line">  珠海市: &#39;440400&#39;,</span><br><span class="line">  汕头市: &#39;440500&#39;,</span><br><span class="line">  佛山市: &#39;440600&#39;,</span><br><span class="line">  江门市: &#39;440700&#39;,</span><br><span class="line">  湛江市: &#39;440800&#39;,</span><br><span class="line">  茂名市: &#39;440900&#39;,</span><br><span class="line">  肇庆市: &#39;441200&#39;,</span><br><span class="line">  惠州市: &#39;441300&#39;,</span><br><span class="line">  梅州市: &#39;441400&#39;,</span><br><span class="line">  汕尾市: &#39;441500&#39;,</span><br><span class="line">  河源市: &#39;441600&#39;,</span><br><span class="line">  阳江市: &#39;441700&#39;,</span><br><span class="line">  清远市: &#39;441800&#39;,</span><br><span class="line">  东莞市: &#39;441900&#39;,</span><br><span class="line">  中山市: &#39;442000&#39;,</span><br><span class="line">  潮州市: &#39;445100&#39;,</span><br><span class="line">  揭阳市: &#39;445200&#39;,</span><br><span class="line">  云浮市: &#39;445300&#39;,</span><br><span class="line">  南宁市: &#39;450100&#39;,</span><br><span class="line">  柳州市: &#39;450200&#39;,</span><br><span class="line">  桂林市: &#39;450300&#39;,</span><br><span class="line">  梧州市: &#39;450400&#39;,</span><br><span class="line">  北海市: &#39;450500&#39;,</span><br><span class="line">  防城港市: &#39;450600&#39;,</span><br><span class="line">  钦州市: &#39;450700&#39;,</span><br><span class="line">  贵港市: &#39;450800&#39;,</span><br><span class="line">  玉林市: &#39;450900&#39;,</span><br><span class="line">  百色市: &#39;451000&#39;,</span><br><span class="line">  贺州市: &#39;451100&#39;,</span><br><span class="line">  河池市: &#39;451200&#39;,</span><br><span class="line">  来宾市: &#39;451300&#39;,</span><br><span class="line">  崇左市: &#39;451400&#39;,</span><br><span class="line">  海口市: &#39;460100&#39;,</span><br><span class="line">  三亚市: &#39;460200&#39;,</span><br><span class="line">  三沙市: &#39;460300&#39;,</span><br><span class="line">  成都市: &#39;510100&#39;,</span><br><span class="line">  自贡市: &#39;510300&#39;,</span><br><span class="line">  攀枝花市: &#39;510400&#39;,</span><br><span class="line">  泸州市: &#39;510500&#39;,</span><br><span class="line">  德阳市: &#39;510600&#39;,</span><br><span class="line">  绵阳市: &#39;510700&#39;,</span><br><span class="line">  广元市: &#39;510800&#39;,</span><br><span class="line">  遂宁市: &#39;510900&#39;,</span><br><span class="line">  内江市: &#39;511000&#39;,</span><br><span class="line">  乐山市: &#39;511100&#39;,</span><br><span class="line">  南充市: &#39;511300&#39;,</span><br><span class="line">  眉山市: &#39;511400&#39;,</span><br><span class="line">  宜宾市: &#39;511500&#39;,</span><br><span class="line">  广安市: &#39;511600&#39;,</span><br><span class="line">  达州市: &#39;511700&#39;,</span><br><span class="line">  雅安市: &#39;511800&#39;,</span><br><span class="line">  巴中市: &#39;511900&#39;,</span><br><span class="line">  资阳市: &#39;512000&#39;,</span><br><span class="line">  阿坝藏族羌族自治州: &#39;513200&#39;,</span><br><span class="line">  甘孜藏族自治州: &#39;513300&#39;,</span><br><span class="line">  凉山彝族自治州: &#39;513400&#39;,</span><br><span class="line">  贵阳市: &#39;520100&#39;,</span><br><span class="line">  六盘水市: &#39;520200&#39;,</span><br><span class="line">  遵义市: &#39;520300&#39;,</span><br><span class="line">  安顺市: &#39;520400&#39;,</span><br><span class="line">  黔西南布依族苗族自治州: &#39;522300&#39;,</span><br><span class="line">  黔东南苗族侗族自治州: &#39;522600&#39;,</span><br><span class="line">  黔南布依族苗族自治州: &#39;522700&#39;,</span><br><span class="line">  昆明市: &#39;530100&#39;,</span><br><span class="line">  曲靖市: &#39;530300&#39;,</span><br><span class="line">  玉溪市: &#39;530400&#39;,</span><br><span class="line">  保山市: &#39;530500&#39;,</span><br><span class="line">  昭通市: &#39;530600&#39;,</span><br><span class="line">  丽江市: &#39;530700&#39;,</span><br><span class="line">  普洱市: &#39;530800&#39;,</span><br><span class="line">  临沧市: &#39;530900&#39;,</span><br><span class="line">  楚雄彝族自治州: &#39;532300&#39;,</span><br><span class="line">  红河哈尼族彝族自治州: &#39;532500&#39;,</span><br><span class="line">  文山壮族苗族自治州: &#39;532600&#39;,</span><br><span class="line">  西双版纳傣族自治州: &#39;532800&#39;,</span><br><span class="line">  大理白族自治州: &#39;532900&#39;,</span><br><span class="line">  德宏傣族景颇族自治州: &#39;533100&#39;,</span><br><span class="line">  怒江傈僳族自治州: &#39;533300&#39;,</span><br><span class="line">  迪庆藏族自治州: &#39;533400&#39;,</span><br><span class="line">  拉萨市: &#39;540100&#39;,</span><br><span class="line">  昌都地区: &#39;542100&#39;,</span><br><span class="line">  山南地区: &#39;542200&#39;,</span><br><span class="line">  日喀则地区: &#39;542300&#39;,</span><br><span class="line">  那曲地区: &#39;542400&#39;,</span><br><span class="line">  阿里地区: &#39;542500&#39;,</span><br><span class="line">  林芝地区: &#39;542600&#39;,</span><br><span class="line">  西安市: &#39;610100&#39;,</span><br><span class="line">  铜川市: &#39;610200&#39;,</span><br><span class="line">  宝鸡市: &#39;610300&#39;,</span><br><span class="line">  咸阳市: &#39;610400&#39;,</span><br><span class="line">  渭南市: &#39;610500&#39;,</span><br><span class="line">  延安市: &#39;610600&#39;,</span><br><span class="line">  汉中市: &#39;610700&#39;,</span><br><span class="line">  榆林市: &#39;610800&#39;,</span><br><span class="line">  安康市: &#39;610900&#39;,</span><br><span class="line">  商洛市: &#39;611000&#39;,</span><br><span class="line">  兰州市: &#39;620100&#39;,</span><br><span class="line">  嘉峪关市: &#39;620200&#39;,</span><br><span class="line">  金昌市: &#39;620300&#39;,</span><br><span class="line">  白银市: &#39;620400&#39;,</span><br><span class="line">  天水市: &#39;620500&#39;,</span><br><span class="line">  武威市: &#39;620600&#39;,</span><br><span class="line">  张掖市: &#39;620700&#39;,</span><br><span class="line">  平凉市: &#39;620800&#39;,</span><br><span class="line">  酒泉市: &#39;620900&#39;,</span><br><span class="line">  庆阳市: &#39;621000&#39;,</span><br><span class="line">  定西市: &#39;621100&#39;,</span><br><span class="line">  陇南市: &#39;621200&#39;,</span><br><span class="line">  临夏回族自治州: &#39;622900&#39;,</span><br><span class="line">  甘南藏族自治州: &#39;623000&#39;,</span><br><span class="line">  西宁市: &#39;630100&#39;,</span><br><span class="line">  海东地区: &#39;632100&#39;,</span><br><span class="line">  海北藏族自治州: &#39;632200&#39;,</span><br><span class="line">  黄南藏族自治州: &#39;632300&#39;,</span><br><span class="line">  海南藏族自治州: &#39;632500&#39;,</span><br><span class="line">  果洛藏族自治州: &#39;632600&#39;,</span><br><span class="line">  玉树藏族自治州: &#39;632700&#39;,</span><br><span class="line">  海西蒙古族藏族自治州: &#39;632800&#39;,</span><br><span class="line">  银川市: &#39;640100&#39;,</span><br><span class="line">  石嘴山市: &#39;640200&#39;,</span><br><span class="line">  吴忠市: &#39;640300&#39;,</span><br><span class="line">  固原市: &#39;640400&#39;,</span><br><span class="line">  中卫市: &#39;640500&#39;,</span><br><span class="line">  乌鲁木齐市: &#39;650100&#39;,</span><br><span class="line">  克拉玛依市: &#39;650200&#39;,</span><br><span class="line">  吐鲁番地区: &#39;652100&#39;,</span><br><span class="line">  哈密地区: &#39;652200&#39;,</span><br><span class="line">  昌吉回族自治州: &#39;652300&#39;,</span><br><span class="line">  博尔塔拉蒙古自治州: &#39;652700&#39;,</span><br><span class="line">  巴音郭楞蒙古自治州: &#39;652800&#39;,</span><br><span class="line">  阿克苏地区: &#39;652900&#39;,</span><br><span class="line">  克孜勒苏柯尔克孜自治州: &#39;653000&#39;,</span><br><span class="line">  喀什地区: &#39;653100&#39;,</span><br><span class="line">  和田地区: &#39;653200&#39;,</span><br><span class="line">  伊犁哈萨克自治州: &#39;654000&#39;,</span><br><span class="line">  塔城地区: &#39;654200&#39;,</span><br><span class="line">  阿勒泰地区: &#39;654300&#39;,</span><br><span class="line">  自治区直辖县级行政区划: &#39;659000&#39;,</span><br><span class="line">  台湾省: &#39;710000&#39;,</span><br><span class="line">  香港特别行政区: &#39;810100&#39;,</span><br><span class="line">  澳门特别行政区: &#39;820000&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123; provinces, cityMap &#125;</span><br></pre></td></tr></table></figure><p>然后再vue文件中引入,提前将echart和axios在main中先导入好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;map&quot; :style&#x3D;&quot;&#123;width: &#39;100%&#39;,height: &#39;700px&#39;&#125;&quot; &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; provinces, cityMap&#125; from &#39;.&#x2F;map.js&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      myMapChart: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    &#x2F;&#x2F; 预留绘制全国地图</span><br><span class="line">    initMap() &#123;</span><br><span class="line">      this.myMapChart &#x3D; this.$echarts.init(document.getElementById(&#39;map&#39;))</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 直辖市和特别行政区-只有二级地图，没有三级地图</span><br><span class="line">      let special &#x3D; [&#39;北京&#39;, &#39;天津&#39;, &#39;上海&#39;, &#39;重庆&#39;, &#39;香港&#39;, &#39;澳门&#39;]</span><br><span class="line">      let mapdata &#x3D; []</span><br><span class="line">      &#x2F;&#x2F; 这是组件开始初始化时需要拉去的数据--中国地图的数据</span><br><span class="line">      this.$axios.get(&#39;static&#x2F;map&#x2F;china.json&#39;).then((res) &#x3D;&gt; &#123;</span><br><span class="line">        let data &#x3D; res.data</span><br><span class="line">        let d &#x3D; []</span><br><span class="line">        for (let i &#x3D; 0; i &lt; data.features.length; i++) &#123;</span><br><span class="line">          d.push(&#123;</span><br><span class="line">            name: data.features[i].properties.name</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        mapdata &#x3D; d</span><br><span class="line">        &#x2F;&#x2F; 注册地图</span><br><span class="line">        this.$echarts.registerMap(&#39;china&#39;, data)</span><br><span class="line">        &#x2F;&#x2F; 绘制地图</span><br><span class="line">        renderMap(&#39;china&#39;, d)</span><br><span class="line">      &#125;)</span><br><span class="line">      &#x2F;&#x2F; 绑定点击事件</span><br><span class="line">      this.myMapChart.on(&#39;click&#39;, (params)&#x3D;&gt; &#123;</span><br><span class="line">        console.log(params)</span><br><span class="line">      if (params.name in provinces) &#123;</span><br><span class="line">      &#x2F;&#x2F; 如果点击的是34个省、市、自治区，绘制选中地区的二级地图</span><br><span class="line">          this.$axios.get(&#39;static&#x2F;map&#x2F;json&#x2F;province&#x2F;&#39; + provinces[params.name] + &#39;.json&#39;).then((res) &#x3D;&gt; &#123;</span><br><span class="line">            let data &#x3D; res.data</span><br><span class="line">            let d &#x3D; []</span><br><span class="line">            this.$echarts.registerMap(params.name, data)</span><br><span class="line">            for (let i &#x3D; 0; i &lt; data.features.length; i++) &#123;</span><br><span class="line">            d.push(&#123;</span><br><span class="line">            name: data.features[i].properties.name</span><br><span class="line">            &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            renderMap(params.name, d)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125; else if (params.seriesName in provinces) &#123;</span><br><span class="line">      &#x2F;&#x2F; 如果是【直辖市&#x2F;特别行政区】只有二级下钻</span><br><span class="line">      if (special.indexOf(params.seriesName) &gt;&#x3D; 0) &#123;</span><br><span class="line">      renderMap(&#39;china&#39;, mapdata)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">      &#x2F;&#x2F; 显示县级地图</span><br><span class="line">            this.$axios.get(&#39;static&#x2F;map&#x2F;json&#x2F;citys&#x2F;&#39; + cityMap[params.name] + &#39;.json&#39;).then((res) &#x3D;&gt; &#123;</span><br><span class="line">              console.log(res)</span><br><span class="line">              let data &#x3D; res.data</span><br><span class="line">              let d &#x3D; []</span><br><span class="line">      this.$echarts.registerMap(params.name, data)</span><br><span class="line">      for (let i &#x3D; 0; i &lt; data.features.length; i++) &#123;</span><br><span class="line">      d.push(&#123;</span><br><span class="line">      name: data.features[i].properties.name</span><br><span class="line">      &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      renderMap(params.name, d)</span><br><span class="line">      &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">      &#x2F;&#x2F; 点击县级时是否返回</span><br><span class="line">      renderMap(&#39;china&#39;, mapdata)</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 初始化绘制全国地图配置</span><br><span class="line">      let _this &#x3D; this</span><br><span class="line">      function renderMap(map, data) &#123;</span><br><span class="line">        let option &#x3D; &#123;</span><br><span class="line">          backgroundColor: &#39;#FFFFFF&#39;,</span><br><span class="line">          grid: &#123;</span><br><span class="line">            height: &#39;100%&#39;,</span><br><span class="line">            width: &#39;100%&#39;</span><br><span class="line">          &#125;,</span><br><span class="line">          series: [&#123;</span><br><span class="line">            name: map,</span><br><span class="line">            type: &#39;map&#39;,</span><br><span class="line">            mapType: map,</span><br><span class="line">            roam: false,</span><br><span class="line">            data: data,</span><br><span class="line">            nameMap: &#123;</span><br><span class="line">              china: &#39;中国&#39;</span><br><span class="line">            &#125;,</span><br><span class="line">            label: &#123;</span><br><span class="line">              normal: &#123;</span><br><span class="line">                show: true,</span><br><span class="line">                textStyle: &#123;</span><br><span class="line">                  color: &#39;#333&#39;,</span><br><span class="line">                  fontSize: 12</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              emphasis: &#123;</span><br><span class="line">                show: true,</span><br><span class="line">                textStyle: &#123;</span><br><span class="line">                  color: &#39;#fff&#39;,</span><br><span class="line">                  fontSize: 12</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            itemStyle: &#123;</span><br><span class="line">              normal: &#123;</span><br><span class="line">                areaColor: &#39;#76b1ff&#39;,</span><br><span class="line">                borderColor: &#39;#eee&#39;,</span><br><span class="line">                shadowColor: &#39;#76b1ff&#39;,</span><br><span class="line">                shadowBlur: 10,</span><br><span class="line">                borderWidth: 2</span><br><span class="line">              &#125;,</span><br><span class="line">              emphasis: &#123;</span><br><span class="line">                &#x2F;&#x2F; 鼠标移入颜色</span><br><span class="line">                areaColor: &#39;#409EFF&#39;,</span><br><span class="line">                borderWidth: 0</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#x2F;&#x2F; 渲染地图</span><br><span class="line">      _this.myMapChart.setOption(option)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.initMap()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>代码已经贴出来了,复制就可以直接使用</p><p>如果想要将地图当成背景使用,echarts中有一个geo的属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">geo: &#123;</span><br><span class="line">  map: map,</span><br><span class="line">  top: &#39;center&#39;,</span><br><span class="line">  left: &#39;60&#39;,</span><br><span class="line">  roam: false,</span><br><span class="line">  width: &#39;100%&#39;,</span><br><span class="line">  height: &#39;100%&#39;,</span><br><span class="line">  zoom: 0.85,</span><br><span class="line">  label: &#123;</span><br><span class="line">    show: true,</span><br><span class="line">    normal: &#123;</span><br><span class="line">      show: true,</span><br><span class="line">      color: &#39;#333&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    emphasis: &#123;</span><br><span class="line">      color: &#39;#fff&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  itemStyle: &#123;</span><br><span class="line">    normal: &#123;</span><br><span class="line">      areaColor: &#39;#76b1ff&#39;,</span><br><span class="line">      borderColor: &#39;#eee&#39;,</span><br><span class="line">      shadowColor: &#39;#76b1ff&#39;,</span><br><span class="line">      shadowBlur: 10,</span><br><span class="line">      borderWidth: 2</span><br><span class="line">    &#125;,</span><br><span class="line">    emphasis: &#123;</span><br><span class="line">      &#x2F;&#x2F; 鼠标移入颜色</span><br><span class="line">      areaColor: &#39;#409EFF&#39;,</span><br><span class="line">      borderWidth: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以让地图当成背景使用,在上面绘制其他图表</p><p>以上就是我对Echart地图配置的一些理解,如果文章由于我学识浅薄,导致您发现有严重谬误的地方,请一定在评论中指出,我会在第一时间修正我的博文,以避免误人子弟。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr style=&#39;filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)&#39; color=&#39;#FF0000&#39; size=&#39;1&#39; /&gt;

&lt;blockquote&gt;
&lt;p&gt;项目中使用到echart的地图,在此记录一下&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="echars" scheme="https://www.chensheng.group/categories/echars/"/>
    
    
      <category term="echars" scheme="https://www.chensheng.group/tags/echars/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli 打包优化</title>
    <link href="https://www.chensheng.group/2020/06/21/129-vue%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96/"/>
    <id>https://www.chensheng.group/2020/06/21/129-vue%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96/</id>
    <published>2020-06-21T07:06:00.000Z</published>
    <updated>2020-07-29T13:26:45.786Z</updated>
    
    <content type="html"><![CDATA[<hr style='filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)' color='#FF0000' size='1' /><blockquote><p>随着项目越来越大,打包的速度也变的很慢,甚至出现了node内存溢出,今天来一起学习一下打包的一些优化</p></blockquote><a id="more"></a><h3 id="node内存溢出"><a href="#node内存溢出" class="headerlink" title="node内存溢出"></a>node内存溢出</h3><p>有些时候,打包或者编译会报这个错误: <code>FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed</code></p><p>是因为Node是基于V8引擎,我们的64位电脑只能支持到1.4G的内存,超过这个就会报错,解决方法如下</p><p>cnpm install -g increase-memory-limit 全局安装<code>increase-memory-limit</code></p><p>进入项目文件夹,运行：<code>increase-memory-limit</code></p><p>如果还是不行,在packjson中修改build命令</p><p><code>&quot;build&quot;: &quot;node --max_old_space_size=8192 build/build.js&quot;</code></p><blockquote><p>如果是多人合作的项目,也可以直接将increase-memory-limit配置到文件当中,做法如下</p></blockquote><p>npm install increase-memory-limit -S<br>npm install cross-env -S</p><p>在packjson中添加命令<code>&quot;fix-memory-limit&quot;: &quot;cross-env LIMIT=8192 increase-memory-limit&quot;</code></p><p>直接运行 <code>npm run fix-memory-limit</code> 就可以了</p><p>可以在/node_modules/.bin/文件中看到,文件被修改了运行内存</p><h3 id="使用HappyPack多进程进行loader处理"><a href="#使用HappyPack多进程进行loader处理" class="headerlink" title="使用HappyPack多进程进行loader处理"></a>使用HappyPack多进程进行loader处理</h3><p>优化原理: </p><ol><li>由于运行在 Node.js 之上的 Webpack 是单线程模型的,所以 Webpack 需要处理的事情只能一件一件地做,不能多件事一起做。</li><li>而 HappyPack 的处理思路是：将原有的 webpack 对 loader 的执行过程,从单一进程的形式扩展多进程模式,从而加速代码构建。</li></ol><p><code>cnpm i happypack -S</code> 安装插件</p><p>修改<code>build/webpack.base.conf.js</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">const HappyPack &#x3D; require(&#39;happypack&#39;);</span><br><span class="line">&#x2F;&#x2F; node 提供的系统操作模块</span><br><span class="line">const os &#x3D; require(&#39;os&#39;);</span><br><span class="line">&#x2F;&#x2F; 根据我的系统的内核BS数量 指定BS线程池个数 也可以其他数量</span><br><span class="line">const happyThreadPool &#x3D; HappyPack.ThreadPool(&#123; size: os.cpus().length &#125;);</span><br><span class="line"> </span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.js$&#x2F;,</span><br><span class="line">        &#x2F;&#x2F;把对.js 的文件处理交给id为happyBabel 的HappyPack 的实例执行</span><br><span class="line">        loader: &#39;happypack&#x2F;loader?id&#x3D;happyBabel&#39;,</span><br><span class="line">        include: [resolve(&#39;src&#39;)],</span><br><span class="line">        &#x2F;&#x2F;排除node_modules 目录下的文件</span><br><span class="line">        exclude: &#x2F;node_modules&#x2F;</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HappyPack(&#123;</span><br><span class="line">        &#x2F;&#x2F;用id来标识 happypack处理那里类文件</span><br><span class="line">      id: &#39;happyBabel&#39;,</span><br><span class="line">      &#x2F;&#x2F;如何处理  用法和loader 的配置一样</span><br><span class="line">      loaders: [&#123;</span><br><span class="line">        loader: &#39;babel-loader?cacheDirectory&#x3D;true&#39;,</span><br><span class="line">      &#125;],</span><br><span class="line">      &#x2F;&#x2F;共享进程池</span><br><span class="line">      threadPool: happyThreadPool,</span><br><span class="line">      &#x2F;&#x2F;允许 HappyPack 输出日志</span><br><span class="line">      verbose: true,</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果报错的话,说明当前使用的webpack版本没有自带os,需要自己安装</p></blockquote><p>npm i webpack-parallel-uglify-plugin -D<br>npm i os -D</p><h3 id="配置loader的-include-amp-exclude"><a href="#配置loader的-include-amp-exclude" class="headerlink" title="配置loader的 include &amp; exclude"></a>配置loader的 include &amp; exclude</h3><p>优化原理</p><ol><li>webpack 的 loaders 里的每个子项都可以有 include 和 exclude 属性：<ul><li>include：导入的文件将由加载程序转换的路径或文件数组（把要处理的目录包括进来）</li><li>exclude：不能满足的条件（排除不处理的目录）</li></ul></li><li>我们可以使用 include 更精确地指定要处理的目录，这可以减少不必要的遍历，从而减少性能损失。</li><li>同时使用 exclude 对于已经明确知道的，不需要处理的目录，予以排除，从而进一步提升性能。</li></ol><p>打开 build/webpack.base.conf.js 文件,添加如下 include , exclude 配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: &#x2F;.vue$&#x2F;,</span><br><span class="line">      loader: &#39;vue-loader&#39;,</span><br><span class="line">      options: vueLoaderConfig,</span><br><span class="line">      include: [resolve(&#39;src&#39;)],  &#x2F;&#x2F; 添加配置</span><br><span class="line">      exclude: &#x2F;node_modules(?!(autotrack|dom-utils))|vendor.dll.js&#x2F; &#x2F;&#x2F; 添加配置</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      test: &#x2F;.js$&#x2F;,</span><br><span class="line">      loader: &#39;babel-loader&#39;,</span><br><span class="line">      include: [resolve(&#39;src&#39;), resolve(&#39;test&#39;), resolve(&#39;node_modules&#x2F;webpack-dev-server&#x2F;client&#39;)], &#x2F;&#x2F; 添加配置</span><br><span class="line">      exclude: &#x2F;node_modules&#x2F; &#x2F;&#x2F; 添加配置</span><br><span class="line">    &#125;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置-resolve-modules"><a href="#配置-resolve-modules" class="headerlink" title="配置 resolve.modules"></a>配置 resolve.modules</h3><p>优化原理:</p><ol><li>webpack 的 resolve.modules 是用来配置模块库（即 node_modules）所在的位置。当 js 里出现 import ‘vue’ 这样不是相对、也不是绝对路径的写法时,它便会到 node_modules 目录下去找。</li><li>在默认配置下,webpack 会采用向上递归搜索的方式去寻找。但通常项目目录里只有一个 node_modules,且是在项目根目录。为了减少搜索范围,可我们以直接写明 node_modules 的全路径。</li></ol><p>修改<code>build/webpack.base.conf.js</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [&#39;.js&#39;, &#39;.vue&#39;, &#39;.json&#39;],</span><br><span class="line">    modules: [</span><br><span class="line">      resolve(&#39;src&#39;),</span><br><span class="line">      resolve(&#39;node_modules&#39;)</span><br><span class="line">    ],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &#39;vue$&#39;: &#39;vue&#x2F;dist&#x2F;vue.esm.js&#39;,</span><br><span class="line">      &#39;@&#39;: resolve(&#39;src&#39;),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查看打包后的文件体积"><a href="#查看打包后的文件体积" class="headerlink" title="查看打包后的文件体积"></a>查看打包后的文件体积</h3><p>打包的时候 <code>npm run build --report</code></p><h3 id="使用webpack-parallel-uglify-plugin多线程压缩JS"><a href="#使用webpack-parallel-uglify-plugin多线程压缩JS" class="headerlink" title="使用webpack-parallel-uglify-plugin多线程压缩JS"></a>使用webpack-parallel-uglify-plugin多线程压缩JS</h3><p>优化原理:</p><ol><li>默认情况下 webpack 使用 UglifyJS 插件进行代码压缩,但由于其采用单线程压缩,速度很慢。</li><li>我们可以改用 webpack-parallel-uglify-plugin 插件,它可以并行运行 UglifyJS 插件,从而更加充分、合理的使用 CPU 资源,从而大大减少构建时间。</li></ol><p><code>npm i webpack-parallel-uglify-plugin</code> 安装</p><p>修改<code>build/webpack.prod.conf.js</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const ParallelUglifyPlugin &#x3D; require(&#39;webpack-parallel-uglify-plugin&#39;);</span><br><span class="line">&#x2F;&#x2F; 删掉webpack提供的UglifyJS插件</span><br><span class="line">&#x2F;&#x2F;new UglifyJsPlugin(&#123;</span><br><span class="line">&#x2F;&#x2F;  uglifyOptions: &#123;</span><br><span class="line">&#x2F;&#x2F;    compress: &#123;</span><br><span class="line">&#x2F;&#x2F;      warnings: false</span><br><span class="line">&#x2F;&#x2F;    &#125;</span><br><span class="line">&#x2F;&#x2F;  &#125;,</span><br><span class="line">&#x2F;&#x2F;  sourceMap: config.build.productionSourceMap,</span><br><span class="line">&#x2F;&#x2F;  parallel: true</span><br><span class="line">&#x2F;&#x2F;&#125;),</span><br><span class="line">&#x2F;&#x2F; 增加 webpack-parallel-uglify-plugin来替换</span><br><span class="line">  new ParallelUglifyPlugin(&#123;</span><br><span class="line">    cacheDir: &#39;.cache&#x2F;&#39;,</span><br><span class="line">    uglifyJS:&#123;</span><br><span class="line">      output: &#123;</span><br><span class="line">        comments: false</span><br><span class="line">      &#125;,</span><br><span class="line">      compress: &#123;</span><br><span class="line">        drop_debugger: true,</span><br><span class="line">        drop_console: true,</span><br><span class="line">        pure_funcs: [&#39;console.log&#39;]</span><br><span class="line">      &#125;,</span><br><span class="line">      warnings: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>warnings 有一些webpack的版本是放在compress里面的</p></blockquote><p>可能打包后会报错:</p><p>ERROR in Encountered an error while minifying static/js/vendor.js:<br>Maximum call stack size exceeded</p><p>不要紧,是因为vendor.js这个文件太大了,导致压缩失败,继续往下走,后面把第三方库抽离出来后就不会报错了</p><h3 id="去除map文件-并开启gzip打包"><a href="#去除map文件-并开启gzip打包" class="headerlink" title="去除map文件,并开启gzip打包"></a>去除map文件,并开启gzip打包</h3><p><code>cnpm install --save-dev compression-webpack-plugin@1.1.11</code>安装,这里一定要带版本号安装,否则会报错</p><p>在config/index中修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">  productionSourceMap: false,</span><br><span class="line">  productionGzip: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dev中的配置也可以稍微修改一选</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devtool: &#39;eval&#39;(最快速度)</span><br></pre></td></tr></table></figure><h3 id="使用-DllPlugin-和-DllReferencePlugin-预编译资源模块"><a href="#使用-DllPlugin-和-DllReferencePlugin-预编译资源模块" class="headerlink" title="使用 DllPlugin 和 DllReferencePlugin 预编译资源模块"></a>使用 DllPlugin 和 DllReferencePlugin 预编译资源模块</h3><p>优化原理:</p><ol><li>我们的项目依赖中通常会引用大量的 npm 包,而这些包在正常的开发过程中并不会进行修改,但是在每一次构建过程中却需要反复的将其解析,而下面介绍的两个插件就是用来规避此类损耗的：<ul><li>DllPlugin 插件：作用是预先编译一些模块。</li><li>DllReferencePlugin 插件：它的所用则是把这些预先编译好的模块引用起来。</li></ul></li><li>注意：DllPlugin 必须要在 DllReferencePlugin 执行前先执行一次,dll 这个概念应该也是借鉴了 windows 程序开发中的 dll 文件的设计理念。</li></ol><p>实践: </p><p>新建一个配置文件，比如build/webpack.dll.conf.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const path &#x3D; require(&#39;path&#39;)</span><br><span class="line">const webpack &#x3D; require(&#39;webpack&#39;)</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    vendor: [&#39;vue&#39;,&#39;vue-router&#39;,&#39;cs-ruler&#39;]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, &#39;..&#x2F;static&#x2F;js&#39;), &#x2F;&#x2F; 打包后文件输出的位置</span><br><span class="line">    filename: &#39;[name].dll.js&#39;,</span><br><span class="line">    library: &#39;[name]_library&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new webpack.DllPlugin(&#123;</span><br><span class="line">      path: path.join(__dirname, &#39;.&#39;, &#39;[name]-manifest.json&#39;),</span><br><span class="line">      name: &#39;[name]_library&#39;,</span><br><span class="line">      context: __dirname &#x2F;&#x2F;必填，不然在web网页中找不到 &#39;_dll_[name]&#39;，会报错</span><br><span class="line">    &#125;),</span><br><span class="line">    &#x2F;&#x2F; 压缩打包的文件</span><br><span class="line">    new webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      compress: &#123;</span><br><span class="line">        warnings: false</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>vendor里面就是第三方库</p></blockquote><p>编辑 package.json 文件,添加一条编译命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dll&quot;: &quot;webpack --config build&#x2F;webpack.dll.conf.js&quot;</span><br></pre></td></tr></table></figure><p>npm run dll 成功以后，static下会有dll.vendor.js，根目录下会有vendor.manifest.json</p><p>ok，到这里，抽离依赖库的事情就完成了，那么接下来问题就是怎么引用呢，怎么在dev和build跑呢？</p><p>这里补了一点dll和commonsChunk概念上的区别，commonsChunk之所以慢和大，是因为每次run的时候，都会去做一次打包，而实际上我们不会一直去更新我们引用的依赖库，所以dll的做法就等于是，事先先打包好依赖库，然后只对每次都修改的js做打包。</p><p>好了,继续</p><p>修改build/webpack.dev.conf.js 和 build/webpack.prod.conf.js, 添加DllReferencePlugin的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const webpack &#x3D; require(&#39;webpack&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;.....</span><br><span class="line">plugins: [</span><br><span class="line">  new webpack.DllReferencePlugin(&#123;</span><br><span class="line">    context: __dirname,</span><br><span class="line">    manifest: require(&#39;.&#x2F;vendor-manifest.json&#39;)</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>最后再index.html中添加<code>&lt;script src=&quot;/static/js/vendor.dll.js&quot;&gt;&lt;/script&gt;</code></p><p>到这里,vue打包优化配置基本结束</p>]]></content>
    
    <summary type="html">
    
      &lt;hr style=&#39;filter:progid:DXImageTransform.Microsoft.Glow(color=#FF0000,strength=10)&#39; color=&#39;#FF0000&#39; size=&#39;1&#39; /&gt;

&lt;blockquote&gt;
&lt;p&gt;随着项目越来越大,打包的速度也变的很慢,甚至出现了node内存溢出,今天来一起学习一下打包的一些优化&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="vue-cli" scheme="https://www.chensheng.group/categories/vue-cli/"/>
    
    
      <category term="vue-cli" scheme="https://www.chensheng.group/tags/vue-cli/"/>
    
  </entry>
  
</feed>
